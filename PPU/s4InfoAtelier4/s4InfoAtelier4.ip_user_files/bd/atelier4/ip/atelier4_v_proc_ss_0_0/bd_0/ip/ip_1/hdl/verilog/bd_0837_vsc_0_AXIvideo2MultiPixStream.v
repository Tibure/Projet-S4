// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_0837_vsc_0_AXIvideo2MultiPixStream (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        SrcYUV_din,
        SrcYUV_full_n,
        SrcYUV_write,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        Height_dout,
        Height_empty_n,
        Height_read,
        WidthIn_dout,
        WidthIn_empty_n,
        WidthIn_read,
        ColorMode_dout,
        ColorMode_empty_n,
        ColorMode_read,
        Height_out_din,
        Height_out_full_n,
        Height_out_write,
        WidthIn_out_din,
        WidthIn_out_full_n,
        WidthIn_out_write,
        ColorMode_out_din,
        ColorMode_out_full_n,
        ColorMode_out_write
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_pp1_stage0 = 9'd32;
parameter    ap_ST_fsm_state8 = 9'd64;
parameter    ap_ST_fsm_state9 = 9'd128;
parameter    ap_ST_fsm_state10 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [23:0] SrcYUV_din;
input   SrcYUV_full_n;
output   SrcYUV_write;
input  [23:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [2:0] s_axis_video_TKEEP;
input  [2:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [0:0] s_axis_video_TDEST;
input  [9:0] Height_dout;
input   Height_empty_n;
output   Height_read;
input  [10:0] WidthIn_dout;
input   WidthIn_empty_n;
output   WidthIn_read;
input  [7:0] ColorMode_dout;
input   ColorMode_empty_n;
output   ColorMode_read;
output  [9:0] Height_out_din;
input   Height_out_full_n;
output   Height_out_write;
output  [10:0] WidthIn_out_din;
input   WidthIn_out_full_n;
output   WidthIn_out_write;
output  [7:0] ColorMode_out_din;
input   ColorMode_out_full_n;
output   ColorMode_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg SrcYUV_write;
reg Height_read;
reg WidthIn_read;
reg ColorMode_read;
reg Height_out_write;
reg WidthIn_out_write;
reg ColorMode_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    SrcYUV_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln820_reg_616;
reg    s_axis_video_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] ap_phi_mux_sof_phi_fu_219_p4;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln820_fu_484_p2;
wire   [0:0] or_ln824_fu_489_p2;
wire    ap_CS_fsm_state9;
wire   [0:0] ap_phi_mux_eol_1_phi_fu_402_p4;
reg    Height_blk_n;
reg    WidthIn_blk_n;
reg    ColorMode_blk_n;
reg    Height_out_blk_n;
reg    WidthIn_out_blk_n;
reg    ColorMode_out_blk_n;
reg   [10:0] j_reg_259;
reg   [0:0] eol_reg_270;
reg   [0:0] sof_6_reg_282;
reg   [0:0] axi_last_V_3_reg_292;
reg   [23:0] axi_data_V_3_reg_302;
reg   [23:0] axi_data_V_7_reg_313;
reg   [0:0] axi_last_V_8_reg_325;
reg    ap_block_state3;
reg    ap_block_state9;
reg   [7:0] ColorMode_read_reg_553;
wire   [9:0] trunc_ln797_fu_441_p1;
reg   [9:0] trunc_ln797_reg_558;
wire    ap_CS_fsm_state2;
wire   [10:0] grp_reg_unsigned_short_s_fu_435_ap_return;
reg   [10:0] cols_reg_563;
wire   [0:0] cmp7661_i_fu_449_p2;
reg   [0:0] cmp7661_i_reg_586;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln844_fu_454_p2;
reg   [0:0] icmp_ln844_reg_590;
wire   [9:0] i_2_fu_464_p2;
reg   [9:0] i_2_reg_597;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln815_fu_473_p2;
wire   [10:0] j_2_fu_478_p2;
reg    ap_predicate_op82_read_state6;
reg    ap_block_state6_pp1_stage0_iter0;
reg    ap_block_state7_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [7:0] pix_val_V_0_2_fu_509_p3;
reg   [7:0] pix_val_V_0_2_reg_624;
wire   [7:0] pix_val_V_1_2_fu_526_p3;
reg   [7:0] pix_val_V_1_2_reg_629;
wire   [7:0] pix_val_V_2_4_fu_533_p3;
reg   [7:0] pix_val_V_2_4_reg_634;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
wire   [10:0] grp_reg_unsigned_short_s_fu_429_d;
wire   [10:0] grp_reg_unsigned_short_s_fu_429_ap_return;
reg   [23:0] axi_data_V_reg_191;
reg   [0:0] axi_last_V_reg_203;
reg   [0:0] sof_reg_215;
reg   [9:0] i_reg_226;
wire    ap_CS_fsm_state10;
reg   [0:0] axi_last_V_2_reg_237;
reg   [0:0] axi_last_V_5_reg_387;
reg   [23:0] axi_data_V_2_reg_248;
reg   [23:0] axi_data_V_5_reg_375;
reg   [0:0] ap_phi_mux_eol_phi_fu_274_p4;
reg   [0:0] ap_phi_mux_sof_6_phi_fu_285_p4;
reg   [0:0] ap_phi_mux_axi_last_V_3_phi_fu_295_p4;
reg   [23:0] ap_phi_mux_axi_data_V_3_phi_fu_305_p4;
reg   [23:0] ap_phi_mux_axi_data_V_7_phi_fu_317_p4;
wire   [23:0] ap_phi_reg_pp1_iter0_axi_data_V_7_reg_313;
wire   [0:0] ap_phi_reg_pp1_iter0_axi_last_V_8_reg_325;
reg   [23:0] ap_phi_mux_axi_data_V_5_ph_phi_fu_341_p4;
reg   [23:0] axi_data_V_5_ph_reg_338;
wire    ap_CS_fsm_state8;
reg   [0:0] ap_phi_mux_axi_last_V_5_ph_phi_fu_353_p4;
reg   [0:0] axi_last_V_5_ph_reg_350;
reg   [0:0] ap_phi_mux_eol_1_ph_phi_fu_366_p4;
reg   [0:0] eol_1_ph_reg_362;
reg   [0:0] eol_1_reg_399;
reg   [0:0] sof_4_fu_120;
reg    ap_block_state1;
reg    ap_block_pp1_stage0_01001;
wire   [7:0] pix_val_V_0_3_fu_499_p4;
wire   [7:0] pix_val_V_0_fu_495_p1;
wire   [7:0] pix_val_V_1_fu_516_p4;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_AXI_video_strm_V_data_V_U_apdone_blk;
wire   [23:0] s_axis_video_TDATA_int_regslice;
wire    s_axis_video_TVALID_int_regslice;
reg    s_axis_video_TREADY_int_regslice;
wire    regslice_both_AXI_video_strm_V_data_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk;
wire   [2:0] s_axis_video_TKEEP_int_regslice;
wire    regslice_both_AXI_video_strm_V_keep_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_keep_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk;
wire   [2:0] s_axis_video_TSTRB_int_regslice;
wire    regslice_both_AXI_video_strm_V_strb_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_strb_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_user_V_U_apdone_blk;
wire   [0:0] s_axis_video_TUSER_int_regslice;
wire    regslice_both_AXI_video_strm_V_user_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_user_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_last_V_U_apdone_blk;
wire   [0:0] s_axis_video_TLAST_int_regslice;
wire    regslice_both_AXI_video_strm_V_last_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_last_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_id_V_U_apdone_blk;
wire   [0:0] s_axis_video_TID_int_regslice;
wire    regslice_both_AXI_video_strm_V_id_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_id_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk;
wire   [0:0] s_axis_video_TDEST_int_regslice;
wire    regslice_both_AXI_video_strm_V_dest_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_dest_V_U_ack_in;
reg    ap_condition_203;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

bd_0837_vsc_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_429(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .d(grp_reg_unsigned_short_s_fu_429_d),
    .ap_return(grp_reg_unsigned_short_s_fu_429_ap_return)
);

bd_0837_vsc_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_435(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .d(WidthIn_dout),
    .ap_return(grp_reg_unsigned_short_s_fu_435_ap_return)
);

bd_0837_vsc_0_regslice_both #(
    .DataWidth( 24 ))
regslice_both_AXI_video_strm_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TDATA),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_data_V_U_ack_in),
    .data_out(s_axis_video_TDATA_int_regslice),
    .vld_out(s_axis_video_TVALID_int_regslice),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_data_V_U_apdone_blk)
);

bd_0837_vsc_0_regslice_both #(
    .DataWidth( 3 ))
regslice_both_AXI_video_strm_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TKEEP),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_keep_V_U_ack_in),
    .data_out(s_axis_video_TKEEP_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_keep_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk)
);

bd_0837_vsc_0_regslice_both #(
    .DataWidth( 3 ))
regslice_both_AXI_video_strm_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TSTRB),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_strb_V_U_ack_in),
    .data_out(s_axis_video_TSTRB_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_strb_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk)
);

bd_0837_vsc_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TUSER),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_user_V_U_ack_in),
    .data_out(s_axis_video_TUSER_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_user_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_user_V_U_apdone_blk)
);

bd_0837_vsc_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TLAST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_last_V_U_ack_in),
    .data_out(s_axis_video_TLAST_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_last_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_last_V_U_apdone_blk)
);

bd_0837_vsc_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TID),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_id_V_U_ack_in),
    .data_out(s_axis_video_TID_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_id_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_id_V_U_apdone_blk)
);

bd_0837_vsc_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TDEST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_dest_V_U_ack_in),
    .data_out(s_axis_video_TDEST_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_dest_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln815_fu_473_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state6))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln815_fu_473_p2 == 1'd0) & (cmp7661_i_reg_586 == 1'd0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state6))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln815_fu_473_p2 == 1'd0) & (cmp7661_i_reg_586 == 1'd0))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        axi_data_V_2_reg_248 <= axi_data_V_5_reg_375;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        axi_data_V_2_reg_248 <= axi_data_V_reg_191;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln815_fu_473_p2 == 1'd0) & (cmp7661_i_reg_586 == 1'd0))) begin
        axi_data_V_3_reg_302 <= axi_data_V_2_reg_248;
    end else if (((icmp_ln820_reg_616 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        axi_data_V_3_reg_302 <= axi_data_V_7_reg_313;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (cmp7661_i_reg_586 == 1'd0))) begin
        axi_data_V_5_ph_reg_338 <= axi_data_V_3_reg_302;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln815_fu_473_p2 == 1'd0) & (cmp7661_i_reg_586 == 1'd1))) begin
        axi_data_V_5_ph_reg_338 <= axi_data_V_2_reg_248;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        axi_data_V_5_reg_375 <= ap_phi_mux_axi_data_V_5_ph_phi_fu_341_p4;
    end else if ((~((s_axis_video_TVALID_int_regslice == 1'b0) & (eol_1_reg_399 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (eol_1_reg_399 == 1'd0))) begin
        axi_data_V_5_reg_375 <= s_axis_video_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_203)) begin
        if (((icmp_ln820_fu_484_p2 == 1'd0) & (or_ln824_fu_489_p2 == 1'd1))) begin
            axi_data_V_7_reg_313 <= ap_phi_mux_axi_data_V_3_phi_fu_305_p4;
        end else if (((icmp_ln820_fu_484_p2 == 1'd0) & (or_ln824_fu_489_p2 == 1'd0))) begin
            axi_data_V_7_reg_313 <= s_axis_video_TDATA_int_regslice;
        end else if ((1'b1 == 1'b1)) begin
            axi_data_V_7_reg_313 <= ap_phi_reg_pp1_iter0_axi_data_V_7_reg_313;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        axi_last_V_2_reg_237 <= axi_last_V_5_reg_387;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        axi_last_V_2_reg_237 <= axi_last_V_reg_203;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln815_fu_473_p2 == 1'd0) & (cmp7661_i_reg_586 == 1'd0))) begin
        axi_last_V_3_reg_292 <= axi_last_V_2_reg_237;
    end else if (((icmp_ln820_reg_616 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        axi_last_V_3_reg_292 <= axi_last_V_8_reg_325;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (cmp7661_i_reg_586 == 1'd0))) begin
        axi_last_V_5_ph_reg_350 <= eol_reg_270;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln815_fu_473_p2 == 1'd0) & (cmp7661_i_reg_586 == 1'd1))) begin
        axi_last_V_5_ph_reg_350 <= axi_last_V_2_reg_237;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        axi_last_V_5_reg_387 <= ap_phi_mux_axi_last_V_5_ph_phi_fu_353_p4;
    end else if ((~((s_axis_video_TVALID_int_regslice == 1'b0) & (eol_1_reg_399 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (eol_1_reg_399 == 1'd0))) begin
        axi_last_V_5_reg_387 <= s_axis_video_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_203)) begin
        if (((icmp_ln820_fu_484_p2 == 1'd0) & (or_ln824_fu_489_p2 == 1'd1))) begin
            axi_last_V_8_reg_325 <= ap_phi_mux_axi_last_V_3_phi_fu_295_p4;
        end else if (((icmp_ln820_fu_484_p2 == 1'd0) & (or_ln824_fu_489_p2 == 1'd0))) begin
            axi_last_V_8_reg_325 <= s_axis_video_TLAST_int_regslice;
        end else if ((1'b1 == 1'b1)) begin
            axi_last_V_8_reg_325 <= ap_phi_reg_pp1_iter0_axi_last_V_8_reg_325;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (cmp7661_i_reg_586 == 1'd0))) begin
        eol_1_ph_reg_362 <= eol_reg_270;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln815_fu_473_p2 == 1'd0) & (cmp7661_i_reg_586 == 1'd1))) begin
        eol_1_ph_reg_362 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        eol_1_reg_399 <= ap_phi_mux_eol_1_ph_phi_fu_366_p4;
    end else if ((~((s_axis_video_TVALID_int_regslice == 1'b0) & (eol_1_reg_399 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (eol_1_reg_399 == 1'd0))) begin
        eol_1_reg_399 <= s_axis_video_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln815_fu_473_p2 == 1'd0) & (cmp7661_i_reg_586 == 1'd0))) begin
        eol_reg_270 <= 1'd0;
    end else if (((icmp_ln820_reg_616 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        eol_reg_270 <= axi_last_V_8_reg_325;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_reg_226 <= i_2_reg_597;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_226 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln815_fu_473_p2 == 1'd0) & (cmp7661_i_reg_586 == 1'd0))) begin
        j_reg_259 <= 11'd0;
    end else if (((icmp_ln820_fu_484_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_reg_259 <= j_2_fu_478_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sof_4_fu_120 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (cmp7661_i_reg_586 == 1'd0))) begin
        sof_4_fu_120 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln815_fu_473_p2 == 1'd0) & (cmp7661_i_reg_586 == 1'd0))) begin
        sof_6_reg_282 <= sof_4_fu_120;
    end else if (((icmp_ln820_reg_616 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sof_6_reg_282 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sof_reg_215 <= 1'd0;
    end else if ((~((sof_reg_215 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (sof_reg_215 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sof_reg_215 <= s_axis_video_TUSER_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ColorMode_read_reg_553 <= ColorMode_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((sof_reg_215 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (sof_reg_215 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        axi_data_V_reg_191 <= s_axis_video_TDATA_int_regslice;
        axi_last_V_reg_203 <= s_axis_video_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cmp7661_i_reg_586 <= cmp7661_i_fu_449_p2;
        icmp_ln844_reg_590 <= icmp_ln844_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cols_reg_563 <= grp_reg_unsigned_short_s_fu_435_ap_return;
        trunc_ln797_reg_558 <= trunc_ln797_fu_441_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_2_reg_597 <= i_2_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln820_reg_616 <= icmp_ln820_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln820_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pix_val_V_0_2_reg_624 <= pix_val_V_0_2_fu_509_p3;
        pix_val_V_1_2_reg_629 <= pix_val_V_1_2_fu_526_p3;
        pix_val_V_2_4_reg_634 <= pix_val_V_2_4_fu_533_p3;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ColorMode_blk_n = ColorMode_empty_n;
    end else begin
        ColorMode_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ColorMode_out_blk_n = ColorMode_out_full_n;
    end else begin
        ColorMode_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == ColorMode_out_full_n) | (1'b0 == WidthIn_out_full_n) | (1'b0 == Height_out_full_n) | (1'b0 == ColorMode_empty_n) | (1'b0 == WidthIn_empty_n) | (1'b0 == Height_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ColorMode_out_write = 1'b1;
    end else begin
        ColorMode_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ColorMode_out_full_n) | (1'b0 == WidthIn_out_full_n) | (1'b0 == Height_out_full_n) | (1'b0 == ColorMode_empty_n) | (1'b0 == WidthIn_empty_n) | (1'b0 == Height_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ColorMode_read = 1'b1;
    end else begin
        ColorMode_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Height_blk_n = Height_empty_n;
    end else begin
        Height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Height_out_blk_n = Height_out_full_n;
    end else begin
        Height_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == ColorMode_out_full_n) | (1'b0 == WidthIn_out_full_n) | (1'b0 == Height_out_full_n) | (1'b0 == ColorMode_empty_n) | (1'b0 == WidthIn_empty_n) | (1'b0 == Height_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Height_out_write = 1'b1;
    end else begin
        Height_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ColorMode_out_full_n) | (1'b0 == WidthIn_out_full_n) | (1'b0 == Height_out_full_n) | (1'b0 == ColorMode_empty_n) | (1'b0 == WidthIn_empty_n) | (1'b0 == Height_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Height_read = 1'b1;
    end else begin
        Height_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln820_reg_616 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        SrcYUV_blk_n = SrcYUV_full_n;
    end else begin
        SrcYUV_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln820_reg_616 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        SrcYUV_write = 1'b1;
    end else begin
        SrcYUV_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        WidthIn_blk_n = WidthIn_empty_n;
    end else begin
        WidthIn_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        WidthIn_out_blk_n = WidthIn_out_full_n;
    end else begin
        WidthIn_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == ColorMode_out_full_n) | (1'b0 == WidthIn_out_full_n) | (1'b0 == Height_out_full_n) | (1'b0 == ColorMode_empty_n) | (1'b0 == WidthIn_empty_n) | (1'b0 == Height_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        WidthIn_out_write = 1'b1;
    end else begin
        WidthIn_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ColorMode_out_full_n) | (1'b0 == WidthIn_out_full_n) | (1'b0 == Height_out_full_n) | (1'b0 == ColorMode_empty_n) | (1'b0 == WidthIn_empty_n) | (1'b0 == Height_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        WidthIn_read = 1'b1;
    end else begin
        WidthIn_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln820_fu_484_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln815_fu_473_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln820_reg_616 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_axi_data_V_3_phi_fu_305_p4 = axi_data_V_7_reg_313;
    end else begin
        ap_phi_mux_axi_data_V_3_phi_fu_305_p4 = axi_data_V_3_reg_302;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (cmp7661_i_reg_586 == 1'd0))) begin
        ap_phi_mux_axi_data_V_5_ph_phi_fu_341_p4 = axi_data_V_3_reg_302;
    end else begin
        ap_phi_mux_axi_data_V_5_ph_phi_fu_341_p4 = axi_data_V_5_ph_reg_338;
    end
end

always @ (*) begin
    if ((icmp_ln820_fu_484_p2 == 1'd0)) begin
        if ((or_ln824_fu_489_p2 == 1'd1)) begin
            ap_phi_mux_axi_data_V_7_phi_fu_317_p4 = ap_phi_mux_axi_data_V_3_phi_fu_305_p4;
        end else if ((or_ln824_fu_489_p2 == 1'd0)) begin
            ap_phi_mux_axi_data_V_7_phi_fu_317_p4 = s_axis_video_TDATA_int_regslice;
        end else begin
            ap_phi_mux_axi_data_V_7_phi_fu_317_p4 = ap_phi_reg_pp1_iter0_axi_data_V_7_reg_313;
        end
    end else begin
        ap_phi_mux_axi_data_V_7_phi_fu_317_p4 = ap_phi_reg_pp1_iter0_axi_data_V_7_reg_313;
    end
end

always @ (*) begin
    if (((icmp_ln820_reg_616 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_axi_last_V_3_phi_fu_295_p4 = axi_last_V_8_reg_325;
    end else begin
        ap_phi_mux_axi_last_V_3_phi_fu_295_p4 = axi_last_V_3_reg_292;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (cmp7661_i_reg_586 == 1'd0))) begin
        ap_phi_mux_axi_last_V_5_ph_phi_fu_353_p4 = eol_reg_270;
    end else begin
        ap_phi_mux_axi_last_V_5_ph_phi_fu_353_p4 = axi_last_V_5_ph_reg_350;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (cmp7661_i_reg_586 == 1'd0))) begin
        ap_phi_mux_eol_1_ph_phi_fu_366_p4 = eol_reg_270;
    end else begin
        ap_phi_mux_eol_1_ph_phi_fu_366_p4 = eol_1_ph_reg_362;
    end
end

always @ (*) begin
    if (((icmp_ln820_reg_616 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_eol_phi_fu_274_p4 = axi_last_V_8_reg_325;
    end else begin
        ap_phi_mux_eol_phi_fu_274_p4 = eol_reg_270;
    end
end

always @ (*) begin
    if (((icmp_ln820_reg_616 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_sof_6_phi_fu_285_p4 = 1'd0;
    end else begin
        ap_phi_mux_sof_6_phi_fu_285_p4 = sof_6_reg_282;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln815_fu_473_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((sof_reg_215 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_CS_fsm_state9) & (eol_1_reg_399 == 1'd0)) | ((icmp_ln820_fu_484_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (or_ln824_fu_489_p2 == 1'd0)))) begin
        s_axis_video_TDATA_blk_n = s_axis_video_TVALID_int_regslice;
    end else begin
        s_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_predicate_op82_read_state6 == 1'b1)) | (~((s_axis_video_TVALID_int_regslice == 1'b0) & (eol_1_reg_399 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (eol_1_reg_399 == 1'd0)) | (~((sof_reg_215 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (sof_reg_215 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        s_axis_video_TREADY_int_regslice = 1'b1;
    end else begin
        s_axis_video_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == ColorMode_out_full_n) | (1'b0 == WidthIn_out_full_n) | (1'b0 == Height_out_full_n) | (1'b0 == ColorMode_empty_n) | (1'b0 == WidthIn_empty_n) | (1'b0 == Height_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((sof_reg_215 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (sof_reg_215 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((sof_reg_215 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (ap_phi_mux_sof_phi_fu_219_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln815_fu_473_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln815_fu_473_p2 == 1'd0) & (cmp7661_i_reg_586 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln820_fu_484_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln820_fu_484_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if ((~((s_axis_video_TVALID_int_regslice == 1'b0) & (eol_1_reg_399 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (eol_1_reg_399 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if ((~((s_axis_video_TVALID_int_regslice == 1'b0) & (eol_1_reg_399 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (ap_phi_mux_eol_1_phi_fu_402_p4 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ColorMode_out_din = ColorMode_dout;

assign Height_out_din = Height_dout;

assign SrcYUV_din = {{{pix_val_V_2_4_reg_634}, {pix_val_V_1_2_reg_629}}, {pix_val_V_0_2_reg_624}};

assign WidthIn_out_din = WidthIn_dout;

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((ap_enable_reg_pp1_iter0 == 1'b1) & (s_axis_video_TVALID_int_regslice == 1'b0) & (ap_predicate_op82_read_state6 == 1'b1)) | ((icmp_ln820_reg_616 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == SrcYUV_full_n)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((ap_enable_reg_pp1_iter0 == 1'b1) & (s_axis_video_TVALID_int_regslice == 1'b0) & (ap_predicate_op82_read_state6 == 1'b1)) | ((icmp_ln820_reg_616 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == SrcYUV_full_n)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((ap_enable_reg_pp1_iter0 == 1'b1) & (s_axis_video_TVALID_int_regslice == 1'b0) & (ap_predicate_op82_read_state6 == 1'b1)) | ((icmp_ln820_reg_616 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == SrcYUV_full_n)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ColorMode_out_full_n) | (1'b0 == WidthIn_out_full_n) | (1'b0 == Height_out_full_n) | (1'b0 == ColorMode_empty_n) | (1'b0 == WidthIn_empty_n) | (1'b0 == Height_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((sof_reg_215 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp1_stage0_iter0 = ((s_axis_video_TVALID_int_regslice == 1'b0) & (ap_predicate_op82_read_state6 == 1'b1));
end

always @ (*) begin
    ap_block_state7_pp1_stage0_iter1 = ((icmp_ln820_reg_616 == 1'd0) & (1'b0 == SrcYUV_full_n));
end

always @ (*) begin
    ap_block_state9 = ((s_axis_video_TVALID_int_regslice == 1'b0) & (eol_1_reg_399 == 1'd0));
end

always @ (*) begin
    ap_condition_203 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_eol_1_phi_fu_402_p4 = eol_1_reg_399;

assign ap_phi_mux_sof_phi_fu_219_p4 = sof_reg_215;

assign ap_phi_reg_pp1_iter0_axi_data_V_7_reg_313 = 'bx;

assign ap_phi_reg_pp1_iter0_axi_last_V_8_reg_325 = 'bx;

always @ (*) begin
    ap_predicate_op82_read_state6 = ((icmp_ln820_fu_484_p2 == 1'd0) & (or_ln824_fu_489_p2 == 1'd0));
end

assign cmp7661_i_fu_449_p2 = ((cols_reg_563 == 11'd0) ? 1'b1 : 1'b0);

assign grp_reg_unsigned_short_s_fu_429_d = Height_dout;

assign i_2_fu_464_p2 = (i_reg_226 + 10'd1);

assign icmp_ln815_fu_473_p2 = ((i_reg_226 == trunc_ln797_reg_558) ? 1'b1 : 1'b0);

assign icmp_ln820_fu_484_p2 = ((j_reg_259 == cols_reg_563) ? 1'b1 : 1'b0);

assign icmp_ln844_fu_454_p2 = ((ColorMode_read_reg_553 == 8'd0) ? 1'b1 : 1'b0);

assign j_2_fu_478_p2 = (j_reg_259 + 11'd1);

assign or_ln824_fu_489_p2 = (ap_phi_mux_sof_6_phi_fu_285_p4 | ap_phi_mux_eol_phi_fu_274_p4);

assign pix_val_V_0_2_fu_509_p3 = ((icmp_ln844_reg_590[0:0] == 1'b1) ? pix_val_V_0_3_fu_499_p4 : pix_val_V_0_fu_495_p1);

assign pix_val_V_0_3_fu_499_p4 = {{ap_phi_mux_axi_data_V_7_phi_fu_317_p4[23:16]}};

assign pix_val_V_0_fu_495_p1 = ap_phi_mux_axi_data_V_7_phi_fu_317_p4[7:0];

assign pix_val_V_1_2_fu_526_p3 = ((icmp_ln844_reg_590[0:0] == 1'b1) ? pix_val_V_0_fu_495_p1 : pix_val_V_1_fu_516_p4);

assign pix_val_V_1_fu_516_p4 = {{ap_phi_mux_axi_data_V_7_phi_fu_317_p4[15:8]}};

assign pix_val_V_2_4_fu_533_p3 = ((icmp_ln844_reg_590[0:0] == 1'b1) ? pix_val_V_1_fu_516_p4 : pix_val_V_0_3_fu_499_p4);

assign s_axis_video_TREADY = regslice_both_AXI_video_strm_V_data_V_U_ack_in;

assign trunc_ln797_fu_441_p1 = grp_reg_unsigned_short_s_fu_429_ap_return[9:0];

endmodule //bd_0837_vsc_0_AXIvideo2MultiPixStream
