// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_0837_vsc_0_v_vcresampler_core (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        srcImg_dout,
        srcImg_empty_n,
        srcImg_read,
        outImg_din,
        outImg_full_n,
        outImg_write,
        height_dout,
        height_empty_n,
        height_read,
        width_dout,
        width_empty_n,
        width_read,
        inColorMode_dout,
        inColorMode_empty_n,
        inColorMode_read,
        outColorMode_dout,
        outColorMode_empty_n,
        outColorMode_read,
        height_out_din,
        height_out_full_n,
        height_out_write,
        width_out_din,
        width_out_full_n,
        width_out_write,
        outColorMode_out_din,
        outColorMode_out_full_n,
        outColorMode_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state8 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] srcImg_dout;
input   srcImg_empty_n;
output   srcImg_read;
output  [23:0] outImg_din;
input   outImg_full_n;
output   outImg_write;
input  [9:0] height_dout;
input   height_empty_n;
output   height_read;
input  [10:0] width_dout;
input   width_empty_n;
output   width_read;
input  [7:0] inColorMode_dout;
input   inColorMode_empty_n;
output   inColorMode_read;
input  [7:0] outColorMode_dout;
input   outColorMode_empty_n;
output   outColorMode_read;
output  [9:0] height_out_din;
input   height_out_full_n;
output   height_out_write;
output  [10:0] width_out_din;
input   width_out_full_n;
output   width_out_write;
output  [7:0] outColorMode_out_din;
input   outColorMode_out_full_n;
output   outColorMode_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg srcImg_read;
reg[23:0] outImg_din;
reg outImg_write;
reg height_read;
reg width_read;
reg inColorMode_read;
reg outColorMode_read;
reg height_out_write;
reg width_out_write;
reg outColorMode_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    srcImg_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1063_reg_892;
reg   [0:0] cmp27_i_reg_849;
reg    outImg_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] tmp_reg_866;
reg   [0:0] icmp_ln1044_reg_800;
reg    ap_enable_reg_pp0_iter4;
reg    height_blk_n;
reg    width_blk_n;
reg    inColorMode_blk_n;
reg    outColorMode_blk_n;
reg    height_out_blk_n;
reg    width_out_blk_n;
reg    outColorMode_out_blk_n;
reg   [10:0] x_2_reg_308;
reg   [10:0] loopWidth_reg_795;
wire   [0:0] icmp_ln1044_fu_328_p2;
wire   [0:0] icmp_ln1048_fu_334_p2;
reg   [0:0] icmp_ln1048_reg_804;
wire   [11:0] zext_ln1019_fu_362_p1;
reg   [11:0] zext_ln1019_reg_809;
wire   [10:0] zext_ln1058_fu_366_p1;
reg   [10:0] zext_ln1058_reg_814;
wire   [0:0] cmp205_i_fu_370_p2;
reg   [0:0] cmp205_i_reg_819;
wire   [10:0] add_ln1060_fu_380_p2;
reg   [10:0] add_ln1060_reg_825;
wire   [0:0] sel_tmp3_fu_386_p2;
reg   [0:0] sel_tmp3_reg_830;
wire   [10:0] y_2_fu_392_p2;
reg   [10:0] y_2_reg_835;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1060_fu_406_p2;
wire   [0:0] empty_fu_416_p1;
reg   [0:0] empty_reg_844;
wire   [0:0] cmp27_i_fu_420_p2;
wire   [0:0] cmp76_i_fu_425_p2;
reg   [0:0] cmp76_i_reg_853;
wire   [0:0] spec_select_i_fu_431_p2;
reg   [0:0] spec_select_i_reg_859;
wire   [0:0] sel_tmp1_fu_450_p2;
reg   [0:0] sel_tmp1_reg_870;
wire   [0:0] sel_tmp4_fu_455_p2;
reg   [0:0] sel_tmp4_reg_876;
wire   [0:0] sel_tmp6_fu_460_p2;
reg   [0:0] sel_tmp6_reg_881;
wire   [10:0] x_fu_465_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_predicate_op88_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_predicate_op127_write_state5;
reg    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
reg    ap_predicate_op159_write_state7;
reg    ap_block_state7_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1063_fu_471_p2;
reg   [0:0] icmp_ln1063_reg_892_pp0_iter1_reg;
reg   [0:0] icmp_ln1063_reg_892_pp0_iter2_reg;
wire   [63:0] idxprom5_i241_i_fu_476_p1;
reg   [63:0] idxprom5_i241_i_reg_896;
reg   [63:0] idxprom5_i241_i_reg_896_pp0_iter1_reg;
reg   [10:0] linebuf_c_val_V_0_addr_reg_903;
reg   [10:0] linebuf_c_val_V_0_addr_reg_903_pp0_iter1_reg;
reg   [10:0] linebuf_c_val_V_1_addr_reg_909;
reg   [10:0] linebuf_c_val_V_1_addr_reg_909_pp0_iter1_reg;
reg   [10:0] linebuf_y_val_V_0_addr_reg_915;
wire   [7:0] linebuf_c_val_V_0_q1;
reg   [7:0] linebuf_c_val_V_0_load_reg_921;
wire   [7:0] linebuf_c_val_V_1_q1;
reg   [7:0] linebuf_c_val_V_1_load_reg_926;
reg   [7:0] linebuf_c_val_V_1_load_reg_926_pp0_iter2_reg;
wire   [7:0] outpix_val_V_1_fu_531_p3;
reg   [7:0] outpix_val_V_1_reg_931;
reg   [7:0] outpix_val_V_1_reg_931_pp0_iter2_reg;
reg   [7:0] outpix_val_V_1_reg_931_pp0_iter3_reg;
wire   [7:0] linebuf_y_val_V_0_q1;
reg   [7:0] outpix_val_V_0_reg_940;
wire   [8:0] zext_ln1346_1_fu_623_p1;
reg   [8:0] zext_ln1346_1_reg_956;
wire   [8:0] add_ln1346_1_fu_627_p2;
reg   [8:0] add_ln1346_1_reg_961;
wire   [7:0] outpix_val_V_0_2_fu_645_p3;
reg   [7:0] outpix_val_V_0_2_reg_966;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter3;
wire   [10:0] linebuf_y_val_V_0_address0;
reg    linebuf_y_val_V_0_ce0;
reg    linebuf_y_val_V_0_we0;
wire   [10:0] linebuf_y_val_V_0_address1;
reg    linebuf_y_val_V_0_ce1;
wire   [10:0] linebuf_y_val_V_1_address0;
reg    linebuf_y_val_V_1_ce0;
reg    linebuf_y_val_V_1_we0;
wire   [7:0] linebuf_y_val_V_1_d0;
wire   [7:0] linebuf_y_val_V_1_q0;
wire   [10:0] linebuf_c_val_V_0_address0;
reg    linebuf_c_val_V_0_ce0;
reg    linebuf_c_val_V_0_we0;
wire   [10:0] linebuf_c_val_V_0_address1;
reg    linebuf_c_val_V_0_ce1;
wire   [10:0] linebuf_c_val_V_1_address0;
reg    linebuf_c_val_V_1_ce0;
reg    linebuf_c_val_V_1_we0;
wire   [7:0] linebuf_c_val_V_1_d0;
wire   [10:0] linebuf_c_val_V_1_address1;
reg    linebuf_c_val_V_1_ce1;
wire   [10:0] linebuf_c_val_V_2_address0;
reg    linebuf_c_val_V_2_ce0;
wire   [7:0] linebuf_c_val_V_2_q0;
reg   [10:0] y_reg_297;
reg    ap_block_state1;
wire    ap_CS_fsm_state8;
reg   [7:0] ap_phi_mux_pixbuf_c_val_V_2_0_3_i_phi_fu_322_p4;
reg   [7:0] ap_phi_reg_pp0_iter2_pixbuf_c_val_V_2_0_3_i_reg_319;
wire   [7:0] ap_phi_reg_pp0_iter0_pixbuf_c_val_V_2_0_3_i_reg_319;
reg   [7:0] ap_phi_reg_pp0_iter1_pixbuf_c_val_V_2_0_3_i_reg_319;
reg   [7:0] mpix_y_val_V_0_fu_116;
wire   [7:0] pix_val_V_0_fu_482_p1;
reg   [7:0] mpix_c_val_V_0_fu_120;
reg   [7:0] pix_val_V_2_1_fu_124;
reg   [7:0] mpix_y_val_V_0_1_fu_128;
reg   [7:0] InCPix_V_fu_132;
reg   [7:0] ret_fu_136;
wire   [7:0] select_ln1132_2_fu_604_p3;
reg   [7:0] InCPix_V_1_fu_140;
wire   [7:0] select_ln1132_fu_558_p3;
wire   [23:0] or_ln174_2_i_fu_590_p4;
reg    ap_block_pp0_stage0_01001;
wire   [23:0] or_ln174_4_i_fu_739_p4;
wire   [0:0] or_ln1044_fu_348_p2;
wire   [1:0] select_ln1044_fu_340_p3;
wire   [1:0] yOffset_fu_354_p3;
wire   [10:0] yOffset_cast_fu_376_p1;
wire   [11:0] zext_ln1060_fu_398_p1;
wire   [11:0] out_y_fu_411_p2;
wire   [0:0] trunc_ln1060_fu_402_p1;
wire   [0:0] sel_tmp_fu_444_p2;
wire   [7:0] newSel_fu_633_p3;
wire   [7:0] newSel18_fu_639_p3;
wire   [8:0] shl_ln_fu_658_p3;
wire   [9:0] zext_ln1346_fu_669_p1;
wire   [9:0] zext_ln215_fu_665_p1;
wire   [9:0] zext_ln1346_2_fu_679_p1;
wire   [9:0] add_ln1346_fu_673_p2;
wire   [9:0] add_ln1346_2_fu_682_p2;
wire   [8:0] zext_ln1345_fu_655_p1;
wire   [8:0] add_ln1346_3_fu_698_p2;
wire   [8:0] add_ln1346_4_fu_704_p2;
wire   [7:0] outpix_val_V_1_1_fu_688_p4;
wire   [7:0] outpix_val_V_1_2_fu_709_p4;
wire   [7:0] outpix_val_V_1_3_fu_719_p3;
wire   [7:0] outpix_val_V_1_4_fu_725_p3;
wire   [7:0] outpix_val_V_1_5_fu_732_p3;
reg   [3:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_81;
reg    ap_enable_state3_pp0_iter0_stage0;
reg    ap_enable_operation_100;
reg    ap_enable_state4_pp0_iter1_stage0;
reg    ap_predicate_op114_store_state5;
reg    ap_enable_operation_114;
reg    ap_enable_state5_pp0_iter2_stage0;
reg    ap_enable_operation_83;
reg    ap_enable_operation_101;
reg    ap_enable_operation_118;
reg    ap_enable_operation_99;
reg    ap_enable_operation_107;
reg    ap_enable_operation_110;
reg    ap_enable_operation_112;
reg    ap_enable_operation_109;
reg    ap_enable_operation_130;
reg    ap_enable_state6_pp0_iter3_stage0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_353;
reg    ap_condition_211;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

bd_0837_vsc_0_v_vcresampler_core_linebuf_y_val_V_0 #(
    .DataWidth( 8 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_y_val_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_y_val_V_0_address0),
    .ce0(linebuf_y_val_V_0_ce0),
    .we0(linebuf_y_val_V_0_we0),
    .d0(mpix_y_val_V_0_1_fu_128),
    .address1(linebuf_y_val_V_0_address1),
    .ce1(linebuf_y_val_V_0_ce1),
    .q1(linebuf_y_val_V_0_q1)
);

bd_0837_vsc_0_v_vcresampler_core_linebuf_y_val_V_1 #(
    .DataWidth( 8 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_y_val_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_y_val_V_1_address0),
    .ce0(linebuf_y_val_V_1_ce0),
    .we0(linebuf_y_val_V_1_we0),
    .d0(linebuf_y_val_V_1_d0),
    .q0(linebuf_y_val_V_1_q0)
);

bd_0837_vsc_0_v_vcresampler_core_linebuf_y_val_V_0 #(
    .DataWidth( 8 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_c_val_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_c_val_V_0_address0),
    .ce0(linebuf_c_val_V_0_ce0),
    .we0(linebuf_c_val_V_0_we0),
    .d0(InCPix_V_fu_132),
    .address1(linebuf_c_val_V_0_address1),
    .ce1(linebuf_c_val_V_0_ce1),
    .q1(linebuf_c_val_V_0_q1)
);

bd_0837_vsc_0_v_vcresampler_core_linebuf_y_val_V_0 #(
    .DataWidth( 8 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_c_val_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_c_val_V_1_address0),
    .ce0(linebuf_c_val_V_1_ce0),
    .we0(linebuf_c_val_V_1_we0),
    .d0(linebuf_c_val_V_1_d0),
    .address1(linebuf_c_val_V_1_address1),
    .ce1(linebuf_c_val_V_1_ce1),
    .q1(linebuf_c_val_V_1_q1)
);

bd_0837_vsc_0_v_vcresampler_core_linebuf_c_val_V_2 #(
    .DataWidth( 8 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_c_val_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_c_val_V_2_address0),
    .ce0(linebuf_c_val_V_2_ce0),
    .q0(linebuf_c_val_V_2_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1060_fu_406_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1060_fu_406_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1060_fu_406_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((spec_select_i_reg_859 == 1'd1)) begin
            InCPix_V_1_fu_140 <= select_ln1132_fu_558_p3;
        end else if ((spec_select_i_reg_859 == 1'd0)) begin
            InCPix_V_1_fu_140 <= ap_phi_mux_pixbuf_c_val_V_2_0_3_i_phi_fu_322_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_211)) begin
        if ((1'b1 == ap_condition_353)) begin
            ap_phi_reg_pp0_iter2_pixbuf_c_val_V_2_0_3_i_reg_319 <= outpix_val_V_1_fu_531_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_pixbuf_c_val_V_2_0_3_i_reg_319 <= ap_phi_reg_pp0_iter1_pixbuf_c_val_V_2_0_3_i_reg_319;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if ((spec_select_i_reg_859 == 1'd1)) begin
            ret_fu_136 <= linebuf_c_val_V_2_q0;
        end else if ((spec_select_i_reg_859 == 1'd0)) begin
            ret_fu_136 <= select_ln1132_2_fu_604_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1063_fu_471_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        x_2_reg_308 <= x_fu_465_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1060_fu_406_p2 == 1'd0))) begin
        x_2_reg_308 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        y_reg_297 <= y_2_reg_835;
    end else if ((~((ap_start == 1'b0) | (outColorMode_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (outColorMode_empty_n == 1'b0) | (inColorMode_empty_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_reg_297 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp27_i_reg_849 == 1'd1) & (icmp_ln1063_reg_892 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        InCPix_V_fu_132 <= {{srcImg_dout[15:8]}};
        mpix_c_val_V_0_fu_120 <= {{srcImg_dout[15:8]}};
        mpix_y_val_V_0_1_fu_128 <= pix_val_V_0_fu_482_p1;
        mpix_y_val_V_0_fu_116 <= pix_val_V_0_fu_482_p1;
        pix_val_V_2_1_fu_124 <= {{srcImg_dout[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln1060_reg_825 <= add_ln1060_fu_380_p2;
        cmp205_i_reg_819 <= cmp205_i_fu_370_p2;
        icmp_ln1044_reg_800 <= icmp_ln1044_fu_328_p2;
        icmp_ln1048_reg_804 <= icmp_ln1048_fu_334_p2;
        loopWidth_reg_795 <= width_dout;
        sel_tmp3_reg_830 <= sel_tmp3_fu_386_p2;
        zext_ln1019_reg_809[1 : 0] <= zext_ln1019_fu_362_p1[1 : 0];
        zext_ln1058_reg_814[9 : 0] <= zext_ln1058_fu_366_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (sel_tmp6_reg_881 == 1'd0) & (sel_tmp4_reg_876 == 1'd0) & (sel_tmp1_reg_870 == 1'd1))) begin
        add_ln1346_1_reg_961 <= add_ln1346_1_fu_627_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_pixbuf_c_val_V_2_0_3_i_reg_319 <= ap_phi_reg_pp0_iter0_pixbuf_c_val_V_2_0_3_i_reg_319;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1060_fu_406_p2 == 1'd0))) begin
        cmp27_i_reg_849 <= cmp27_i_fu_420_p2;
        cmp76_i_reg_853 <= cmp76_i_fu_425_p2;
        empty_reg_844 <= empty_fu_416_p1;
        sel_tmp1_reg_870 <= sel_tmp1_fu_450_p2;
        sel_tmp4_reg_876 <= sel_tmp4_fu_455_p2;
        sel_tmp6_reg_881 <= sel_tmp6_fu_460_p2;
        spec_select_i_reg_859 <= spec_select_i_fu_431_p2;
        tmp_reg_866 <= out_y_fu_411_p2[32'd11];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1063_reg_892 <= icmp_ln1063_fu_471_p2;
        icmp_ln1063_reg_892_pp0_iter1_reg <= icmp_ln1063_reg_892;
        idxprom5_i241_i_reg_896_pp0_iter1_reg[10 : 0] <= idxprom5_i241_i_reg_896[10 : 0];
        linebuf_c_val_V_0_addr_reg_903_pp0_iter1_reg <= linebuf_c_val_V_0_addr_reg_903;
        linebuf_c_val_V_1_addr_reg_909_pp0_iter1_reg <= linebuf_c_val_V_1_addr_reg_909;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln1063_reg_892_pp0_iter2_reg <= icmp_ln1063_reg_892_pp0_iter1_reg;
        linebuf_c_val_V_1_load_reg_926_pp0_iter2_reg <= linebuf_c_val_V_1_load_reg_926;
        outpix_val_V_0_2_reg_966 <= outpix_val_V_0_2_fu_645_p3;
        outpix_val_V_1_reg_931_pp0_iter2_reg <= outpix_val_V_1_reg_931;
        outpix_val_V_1_reg_931_pp0_iter3_reg <= outpix_val_V_1_reg_931_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1063_fu_471_p2 == 1'd0))) begin
        idxprom5_i241_i_reg_896[10 : 0] <= idxprom5_i241_i_fu_476_p1[10 : 0];
        linebuf_c_val_V_0_addr_reg_903 <= idxprom5_i241_i_fu_476_p1;
        linebuf_c_val_V_1_addr_reg_909 <= idxprom5_i241_i_fu_476_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1063_reg_892 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_c_val_V_0_load_reg_921 <= linebuf_c_val_V_0_q1;
        linebuf_c_val_V_1_load_reg_926 <= linebuf_c_val_V_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1063_reg_892 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_y_val_V_0_addr_reg_915 <= idxprom5_i241_i_reg_896;
        outpix_val_V_1_reg_931 <= outpix_val_V_1_fu_531_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1063_reg_892_pp0_iter1_reg == 1'd0))) begin
        outpix_val_V_0_reg_940 <= linebuf_y_val_V_0_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_2_reg_835 <= y_2_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (sel_tmp6_reg_881 == 1'd0))) begin
        zext_ln1346_1_reg_956[7 : 0] <= zext_ln1346_1_fu_623_p1[7 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln1063_fu_471_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1060_fu_406_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((cmp27_i_reg_849 == 1'd1) & (icmp_ln1063_reg_892_pp0_iter1_reg == 1'd0) & (spec_select_i_reg_859 == 1'd0))) begin
        ap_phi_mux_pixbuf_c_val_V_2_0_3_i_phi_fu_322_p4 = InCPix_V_fu_132;
    end else begin
        ap_phi_mux_pixbuf_c_val_V_2_0_3_i_phi_fu_322_p4 = ap_phi_reg_pp0_iter2_pixbuf_c_val_V_2_0_3_i_reg_319;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1060_fu_406_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_blk_n = height_empty_n;
    end else begin
        height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_out_blk_n = height_out_full_n;
    end else begin
        height_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (outColorMode_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (outColorMode_empty_n == 1'b0) | (inColorMode_empty_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_out_write = 1'b1;
    end else begin
        height_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (outColorMode_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (outColorMode_empty_n == 1'b0) | (inColorMode_empty_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_read = 1'b1;
    end else begin
        height_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        inColorMode_blk_n = inColorMode_empty_n;
    end else begin
        inColorMode_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (outColorMode_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (outColorMode_empty_n == 1'b0) | (inColorMode_empty_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        inColorMode_read = 1'b1;
    end else begin
        inColorMode_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_c_val_V_0_ce0 = 1'b1;
    end else begin
        linebuf_c_val_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        linebuf_c_val_V_0_ce1 = 1'b1;
    end else begin
        linebuf_c_val_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (cmp27_i_reg_849 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1063_reg_892_pp0_iter1_reg == 1'd0) & (spec_select_i_reg_859 == 1'd0))) begin
        linebuf_c_val_V_0_we0 = 1'b1;
    end else begin
        linebuf_c_val_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_c_val_V_1_ce0 = 1'b1;
    end else begin
        linebuf_c_val_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        linebuf_c_val_V_1_ce1 = 1'b1;
    end else begin
        linebuf_c_val_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (spec_select_i_reg_859 == 1'd0))) begin
        linebuf_c_val_V_1_we0 = 1'b1;
    end else begin
        linebuf_c_val_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_c_val_V_2_ce0 = 1'b1;
    end else begin
        linebuf_c_val_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_y_val_V_0_ce0 = 1'b1;
    end else begin
        linebuf_y_val_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_y_val_V_0_ce1 = 1'b1;
    end else begin
        linebuf_y_val_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1063_reg_892_pp0_iter1_reg == 1'd0))) begin
        linebuf_y_val_V_0_we0 = 1'b1;
    end else begin
        linebuf_y_val_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1063_reg_892_pp0_iter1_reg == 1'd0))) begin
        linebuf_y_val_V_1_ce0 = 1'b1;
    end else begin
        linebuf_y_val_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1063_reg_892_pp0_iter1_reg == 1'd0))) begin
        linebuf_y_val_V_1_we0 = 1'b1;
    end else begin
        linebuf_y_val_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        outColorMode_blk_n = outColorMode_empty_n;
    end else begin
        outColorMode_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        outColorMode_out_blk_n = outColorMode_out_full_n;
    end else begin
        outColorMode_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (outColorMode_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (outColorMode_empty_n == 1'b0) | (inColorMode_empty_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        outColorMode_out_write = 1'b1;
    end else begin
        outColorMode_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (outColorMode_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (outColorMode_empty_n == 1'b0) | (inColorMode_empty_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        outColorMode_read = 1'b1;
    end else begin
        outColorMode_read = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln1044_reg_800 == 1'd0) & (tmp_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln1044_reg_800 == 1'd1) & (tmp_reg_866 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        outImg_blk_n = outImg_full_n;
    end else begin
        outImg_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_01001)) begin
        if (((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_predicate_op159_write_state7 == 1'b1))) begin
            outImg_din = or_ln174_4_i_fu_739_p4;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op127_write_state5 == 1'b1))) begin
            outImg_din = or_ln174_2_i_fu_590_p4;
        end else begin
            outImg_din = 'bx;
        end
    end else begin
        outImg_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op159_write_state7 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op127_write_state5 == 1'b1)))) begin
        outImg_write = 1'b1;
    end else begin
        outImg_write = 1'b0;
    end
end

always @ (*) begin
    if (((cmp27_i_reg_849 == 1'd1) & (icmp_ln1063_reg_892 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcImg_blk_n = srcImg_empty_n;
    end else begin
        srcImg_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op88_read_state4 == 1'b1))) begin
        srcImg_read = 1'b1;
    end else begin
        srcImg_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_blk_n = width_empty_n;
    end else begin
        width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_out_blk_n = width_out_full_n;
    end else begin
        width_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (outColorMode_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (outColorMode_empty_n == 1'b0) | (inColorMode_empty_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_out_write = 1'b1;
    end else begin
        width_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (outColorMode_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (outColorMode_empty_n == 1'b0) | (inColorMode_empty_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_read = 1'b1;
    end else begin
        width_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (outColorMode_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (outColorMode_empty_n == 1'b0) | (inColorMode_empty_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1060_fu_406_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln1063_fu_471_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln1063_fu_471_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1060_fu_380_p2 = (zext_ln1058_fu_366_p1 + yOffset_cast_fu_376_p1);

assign add_ln1346_1_fu_627_p2 = (zext_ln1346_1_fu_623_p1 + 9'd2);

assign add_ln1346_2_fu_682_p2 = (zext_ln1346_2_fu_679_p1 + add_ln1346_fu_673_p2);

assign add_ln1346_3_fu_698_p2 = (zext_ln1345_fu_655_p1 + 9'd1);

assign add_ln1346_4_fu_704_p2 = (add_ln1346_3_fu_698_p2 + zext_ln1346_1_reg_956);

assign add_ln1346_fu_673_p2 = (zext_ln1346_fu_669_p1 + zext_ln215_fu_665_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op159_write_state7 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op127_write_state5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (srcImg_empty_n == 1'b0) & (ap_predicate_op88_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op159_write_state7 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op127_write_state5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (srcImg_empty_n == 1'b0) & (ap_predicate_op88_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op159_write_state7 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op127_write_state5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (srcImg_empty_n == 1'b0) & (ap_predicate_op88_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (outColorMode_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (outColorMode_empty_n == 1'b0) | (inColorMode_empty_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((srcImg_empty_n == 1'b0) & (ap_predicate_op88_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((outImg_full_n == 1'b0) & (ap_predicate_op127_write_state5 == 1'b1));
end

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter4 = ((outImg_full_n == 1'b0) & (ap_predicate_op159_write_state7 == 1'b1));
end

always @ (*) begin
    ap_condition_211 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_353 = ((cmp27_i_reg_849 == 1'd0) & (icmp_ln1063_reg_892 == 1'd0) & (spec_select_i_reg_859 == 1'd0));
end

always @ (*) begin
    ap_enable_operation_100 = (icmp_ln1063_reg_892 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_101 = (icmp_ln1063_reg_892 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_107 = (icmp_ln1063_reg_892_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_109 = (icmp_ln1063_reg_892_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_110 = (icmp_ln1063_reg_892_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_112 = (icmp_ln1063_reg_892_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_114 = (ap_predicate_op114_store_state5 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_118 = (spec_select_i_reg_859 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_130 = (icmp_ln1063_reg_892_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_81 = (icmp_ln1063_fu_471_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_83 = (icmp_ln1063_fu_471_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_99 = (icmp_ln1063_reg_892 == 1'd0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state3_pp0_iter0_stage0 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_enable_state4_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state5_pp0_iter2_stage0 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state6_pp0_iter3_stage0 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_phi_reg_pp0_iter0_pixbuf_c_val_V_2_0_3_i_reg_319 = 'bx;

always @ (*) begin
    ap_predicate_op114_store_state5 = ((cmp27_i_reg_849 == 1'd1) & (icmp_ln1063_reg_892_pp0_iter1_reg == 1'd0) & (spec_select_i_reg_859 == 1'd0));
end

always @ (*) begin
    ap_predicate_op127_write_state5 = ((icmp_ln1044_reg_800 == 1'd1) & (tmp_reg_866 == 1'd0));
end

always @ (*) begin
    ap_predicate_op159_write_state7 = ((icmp_ln1044_reg_800 == 1'd0) & (tmp_reg_866 == 1'd0));
end

always @ (*) begin
    ap_predicate_op88_read_state4 = ((cmp27_i_reg_849 == 1'd1) & (icmp_ln1063_reg_892 == 1'd0));
end

assign cmp205_i_fu_370_p2 = ((inColorMode_dout == 8'd2) ? 1'b1 : 1'b0);

assign cmp27_i_fu_420_p2 = ((y_reg_297 < zext_ln1058_reg_814) ? 1'b1 : 1'b0);

assign cmp76_i_fu_425_p2 = ((y_reg_297 != 11'd0) ? 1'b1 : 1'b0);

assign empty_fu_416_p1 = out_y_fu_411_p2[0:0];

assign height_out_din = height_dout;

assign icmp_ln1044_fu_328_p2 = ((inColorMode_dout == outColorMode_dout) ? 1'b1 : 1'b0);

assign icmp_ln1048_fu_334_p2 = ((inColorMode_dout == 8'd3) ? 1'b1 : 1'b0);

assign icmp_ln1060_fu_406_p2 = ((y_reg_297 == add_ln1060_reg_825) ? 1'b1 : 1'b0);

assign icmp_ln1063_fu_471_p2 = ((x_2_reg_308 == loopWidth_reg_795) ? 1'b1 : 1'b0);

assign idxprom5_i241_i_fu_476_p1 = x_2_reg_308;

assign linebuf_c_val_V_0_address0 = linebuf_c_val_V_0_addr_reg_903_pp0_iter1_reg;

assign linebuf_c_val_V_0_address1 = idxprom5_i241_i_fu_476_p1;

assign linebuf_c_val_V_1_address0 = linebuf_c_val_V_1_addr_reg_909_pp0_iter1_reg;

assign linebuf_c_val_V_1_address1 = idxprom5_i241_i_fu_476_p1;

assign linebuf_c_val_V_1_d0 = ((cmp76_i_reg_853[0:0] == 1'b1) ? outpix_val_V_1_reg_931 : ap_phi_mux_pixbuf_c_val_V_2_0_3_i_phi_fu_322_p4);

assign linebuf_c_val_V_2_address0 = idxprom5_i241_i_reg_896_pp0_iter1_reg;

assign linebuf_y_val_V_0_address0 = linebuf_y_val_V_0_addr_reg_915;

assign linebuf_y_val_V_0_address1 = idxprom5_i241_i_reg_896;

assign linebuf_y_val_V_1_address0 = idxprom5_i241_i_reg_896_pp0_iter1_reg;

assign linebuf_y_val_V_1_d0 = ((cmp76_i_reg_853[0:0] == 1'b1) ? linebuf_y_val_V_0_q1 : mpix_y_val_V_0_1_fu_128);

assign newSel18_fu_639_p3 = ((sel_tmp1_reg_870[0:0] == 1'b1) ? outpix_val_V_0_reg_940 : linebuf_y_val_V_1_q0);

assign newSel_fu_633_p3 = ((sel_tmp6_reg_881[0:0] == 1'b1) ? outpix_val_V_0_reg_940 : linebuf_y_val_V_1_q0);

assign or_ln1044_fu_348_p2 = (icmp_ln1048_fu_334_p2 | icmp_ln1044_fu_328_p2);

assign or_ln174_2_i_fu_590_p4 = {{{pix_val_V_2_1_fu_124}, {mpix_c_val_V_0_fu_120}}, {mpix_y_val_V_0_fu_116}};

assign or_ln174_4_i_fu_739_p4 = {{{{8'd0}, {outpix_val_V_1_5_fu_732_p3}}}, {outpix_val_V_0_2_reg_966}};

assign outColorMode_out_din = outColorMode_dout;

assign out_y_fu_411_p2 = (zext_ln1060_fu_398_p1 - zext_ln1019_reg_809);

assign outpix_val_V_0_2_fu_645_p3 = ((empty_reg_844[0:0] == 1'b1) ? newSel_fu_633_p3 : newSel18_fu_639_p3);

assign outpix_val_V_1_1_fu_688_p4 = {{add_ln1346_2_fu_682_p2[9:2]}};

assign outpix_val_V_1_2_fu_709_p4 = {{add_ln1346_4_fu_704_p2[8:1]}};

assign outpix_val_V_1_3_fu_719_p3 = ((sel_tmp1_reg_870[0:0] == 1'b1) ? outpix_val_V_1_1_fu_688_p4 : outpix_val_V_1_reg_931_pp0_iter3_reg);

assign outpix_val_V_1_4_fu_725_p3 = ((sel_tmp4_reg_876[0:0] == 1'b1) ? outpix_val_V_1_2_fu_709_p4 : outpix_val_V_1_3_fu_719_p3);

assign outpix_val_V_1_5_fu_732_p3 = ((sel_tmp6_reg_881[0:0] == 1'b1) ? 8'd0 : outpix_val_V_1_4_fu_725_p3);

assign outpix_val_V_1_fu_531_p3 = ((spec_select_i_reg_859[0:0] == 1'b1) ? linebuf_c_val_V_1_q1 : linebuf_c_val_V_0_q1);

assign pix_val_V_0_fu_482_p1 = srcImg_dout[7:0];

assign sel_tmp1_fu_450_p2 = (sel_tmp_fu_444_p2 & cmp205_i_reg_819);

assign sel_tmp3_fu_386_p2 = (cmp205_i_fu_370_p2 ^ 1'd1);

assign sel_tmp4_fu_455_p2 = (sel_tmp3_reg_830 & empty_fu_416_p1);

assign sel_tmp6_fu_460_p2 = (empty_fu_416_p1 & cmp205_i_reg_819);

assign sel_tmp_fu_444_p2 = (empty_fu_416_p1 ^ 1'd1);

assign select_ln1044_fu_340_p3 = ((icmp_ln1044_fu_328_p2[0:0] == 1'b1) ? 2'd0 : 2'd2);

assign select_ln1132_2_fu_604_p3 = ((spec_select_i_reg_859[0:0] == 1'b1) ? ret_fu_136 : linebuf_c_val_V_1_load_reg_926_pp0_iter2_reg);

assign select_ln1132_fu_558_p3 = ((spec_select_i_reg_859[0:0] == 1'b1) ? linebuf_c_val_V_0_load_reg_921 : InCPix_V_1_fu_140);

assign shl_ln_fu_658_p3 = {{outpix_val_V_1_reg_931_pp0_iter3_reg}, {1'd0}};

assign spec_select_i_fu_431_p2 = (trunc_ln1060_fu_402_p1 & icmp_ln1048_reg_804);

assign trunc_ln1060_fu_402_p1 = y_reg_297[0:0];

assign width_out_din = width_dout;

assign x_fu_465_p2 = (x_2_reg_308 + 11'd1);

assign yOffset_cast_fu_376_p1 = yOffset_fu_354_p3;

assign yOffset_fu_354_p3 = ((or_ln1044_fu_348_p2[0:0] == 1'b1) ? select_ln1044_fu_340_p3 : 2'd1);

assign y_2_fu_392_p2 = (y_reg_297 + 11'd1);

assign zext_ln1019_fu_362_p1 = yOffset_fu_354_p3;

assign zext_ln1058_fu_366_p1 = height_dout;

assign zext_ln1060_fu_398_p1 = y_reg_297;

assign zext_ln1345_fu_655_p1 = outpix_val_V_1_reg_931_pp0_iter3_reg;

assign zext_ln1346_1_fu_623_p1 = InCPix_V_1_fu_140;

assign zext_ln1346_2_fu_679_p1 = add_ln1346_1_reg_961;

assign zext_ln1346_fu_669_p1 = shl_ln_fu_658_p3;

assign zext_ln215_fu_665_p1 = ret_fu_136;

always @ (posedge ap_clk) begin
    zext_ln1019_reg_809[11:2] <= 10'b0000000000;
    zext_ln1058_reg_814[10] <= 1'b0;
    idxprom5_i241_i_reg_896[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    idxprom5_i241_i_reg_896_pp0_iter1_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln1346_1_reg_956[8] <= 1'b0;
end

endmodule //bd_0837_vsc_0_v_vcresampler_core
