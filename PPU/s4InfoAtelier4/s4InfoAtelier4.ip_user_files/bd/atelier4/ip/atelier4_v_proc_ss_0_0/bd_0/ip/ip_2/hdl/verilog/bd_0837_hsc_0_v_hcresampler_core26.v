// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_0837_hsc_0_v_hcresampler_core26 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        srcImg_dout,
        srcImg_empty_n,
        srcImg_read,
        height,
        width,
        outImg_din,
        outImg_full_n,
        outImg_write,
        p_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] srcImg_dout;
input   srcImg_empty_n;
output   srcImg_read;
input  [15:0] height;
input  [15:0] width;
output  [23:0] outImg_din;
input   outImg_full_n;
output   outImg_write;
input   p_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg srcImg_read;
reg[23:0] outImg_din;
reg outImg_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    srcImg_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1448_reg_776;
reg   [0:0] icmp_ln1458_reg_786;
reg    outImg_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln1448_reg_776_pp0_iter1_reg;
reg   [0:0] tmp_reg_800;
reg   [0:0] tmp_reg_800_pp0_iter1_reg;
wire   [0:0] p_read_1_read_fu_136_p2;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_reg_800_pp0_iter2_reg;
reg   [14:0] x_reg_178;
wire   [15:0] select_ln1443_fu_189_p3;
reg   [15:0] select_ln1443_reg_735;
wire   [15:0] loopWidth_fu_197_p2;
reg   [15:0] loopWidth_reg_745;
wire   [14:0] y_2_fu_203_p2;
reg   [14:0] y_2_reg_750;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1445_fu_213_p2;
wire   [14:0] x_2_fu_218_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_predicate_op60_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_predicate_op115_write_state5;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_predicate_op131_write_state6;
reg    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] trunc_ln1448_fu_228_p1;
reg   [0:0] trunc_ln1448_reg_764;
reg   [0:0] trunc_ln1448_reg_764_pp0_iter1_reg;
wire   [0:0] icmp_ln1448_fu_232_p2;
wire   [0:0] odd_col_fu_242_p1;
reg   [0:0] odd_col_reg_780;
reg   [0:0] odd_col_reg_780_pp0_iter1_reg;
wire   [0:0] icmp_ln1458_fu_246_p2;
wire   [0:0] cmp118_fu_251_p2;
reg   [0:0] cmp118_reg_790;
reg   [0:0] cmp118_reg_790_pp0_iter1_reg;
wire   [7:0] select_ln1414_fu_519_p3;
reg   [7:0] select_ln1414_reg_804;
wire   [7:0] select_ln1414_1_fu_526_p3;
reg   [7:0] select_ln1414_1_reg_809;
reg   [7:0] pixbuf_y_val_V_1_0_05_load_reg_814;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter2_state5;
reg   [14:0] y_reg_167;
reg    ap_block_state1;
wire    ap_CS_fsm_state7;
reg   [7:0] mpix_y_val_V_0_fu_68;
wire   [7:0] inpix_val_V_0_fu_271_p1;
reg   [7:0] inpix_val_V_1_fu_72;
wire   [7:0] mpix_cb_val_V_0_fu_275_p4;
reg   [7:0] inpix_val_V_2_1_fu_76;
reg   [7:0] mpix_y_val_V_0_3_fu_80;
reg   [7:0] mpix_cb_val_V_0_0_fu_84;
wire   [7:0] select_ln1473_1_fu_302_p3;
reg   [7:0] mpix_cr_val_V_0_0_fu_88;
wire   [7:0] select_ln1473_fu_295_p3;
reg   [7:0] pixbuf_cr_val_V_3_0_0_fu_92;
wire   [7:0] select_ln1539_5_fu_452_p3;
reg   [7:0] pixbuf_y_val_V_1_0_05_fu_96;
reg   [7:0] pixbuf_y_val_V_2_0_06_fu_100;
reg   [7:0] pixbuf_y_val_V_3_0_07_fu_104;
reg   [7:0] pixbuf_y_val_V_4_0_08_fu_108;
reg   [7:0] mpix_y_val_V_0_4_fu_112;
reg   [7:0] rhs_2_fu_116;
wire   [7:0] rhs_fu_445_p3;
reg   [7:0] lhs_2_fu_120;
wire   [7:0] lhs_fu_438_p3;
reg   [7:0] pixbuf_cb_val_V_3_0_0_fu_124;
wire   [7:0] select_ln1539_2_fu_431_p3;
reg   [7:0] rhs_3_fu_128;
wire   [7:0] rhs_4_fu_424_p3;
reg   [7:0] lhs_3_fu_132;
wire   [7:0] lhs_4_fu_417_p3;
wire   [23:0] or_ln174_4_fu_545_p4;
reg    ap_block_pp0_stage0_01001;
wire   [23:0] or_ln174_6_fu_614_p4;
wire   [0:0] select_ln1443_fu_189_p0;
wire   [15:0] zext_ln1445_fu_209_p1;
wire   [15:0] zext_ln1448_fu_224_p1;
wire   [15:0] out_x_fu_237_p2;
wire   [7:0] select_ln1519_fu_375_p3;
wire   [7:0] select_ln1519_1_fu_382_p3;
wire   [7:0] select_ln1519_2_fu_389_p3;
wire   [7:0] select_ln1519_3_fu_396_p3;
wire   [7:0] select_ln1519_4_fu_403_p3;
wire   [7:0] select_ln1519_5_fu_410_p3;
wire   [8:0] zext_ln215_fu_459_p1;
wire   [8:0] add_ln1346_fu_467_p2;
wire   [8:0] zext_ln215_1_fu_463_p1;
wire   [8:0] ret_fu_473_p2;
wire   [8:0] zext_ln215_2_fu_489_p1;
wire   [8:0] add_ln1346_4_fu_497_p2;
wire   [8:0] zext_ln215_3_fu_493_p1;
wire   [8:0] ret_1_fu_503_p2;
wire   [7:0] trunc_ln1_fu_479_p4;
wire   [7:0] trunc_ln213_1_fu_509_p4;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_213_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_213_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_213_p2 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter2_state5)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state5))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_213_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1448_fu_232_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        x_reg_178 <= x_2_fu_218_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_213_p2 == 1'd1))) begin
        x_reg_178 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        y_reg_167 <= y_2_reg_750;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_reg_167 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1448_fu_232_p2 == 1'd1))) begin
        cmp118_reg_790 <= cmp118_fu_251_p2;
        icmp_ln1458_reg_786 <= icmp_ln1458_fu_246_p2;
        odd_col_reg_780 <= odd_col_fu_242_p1;
        tmp_reg_800 <= out_x_fu_237_p2[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmp118_reg_790_pp0_iter1_reg <= cmp118_reg_790;
        icmp_ln1448_reg_776 <= icmp_ln1448_fu_232_p2;
        icmp_ln1448_reg_776_pp0_iter1_reg <= icmp_ln1448_reg_776;
        odd_col_reg_780_pp0_iter1_reg <= odd_col_reg_780;
        tmp_reg_800_pp0_iter1_reg <= tmp_reg_800;
        trunc_ln1448_reg_764 <= trunc_ln1448_fu_228_p1;
        trunc_ln1448_reg_764_pp0_iter1_reg <= trunc_ln1448_reg_764;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1458_reg_786 == 1'd1) & (icmp_ln1448_reg_776 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inpix_val_V_1_fu_72 <= {{srcImg_dout[15:8]}};
        inpix_val_V_2_1_fu_76 <= {{srcImg_dout[23:16]}};
        mpix_cb_val_V_0_0_fu_84 <= select_ln1473_1_fu_302_p3;
        mpix_cr_val_V_0_0_fu_88 <= select_ln1473_fu_295_p3;
        mpix_y_val_V_0_3_fu_80 <= inpix_val_V_0_fu_271_p1;
        mpix_y_val_V_0_fu_68 <= inpix_val_V_0_fu_271_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1448_reg_776_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lhs_2_fu_120 <= lhs_fu_438_p3;
        lhs_3_fu_132 <= lhs_4_fu_417_p3;
        mpix_y_val_V_0_4_fu_112 <= mpix_y_val_V_0_3_fu_80;
        pixbuf_cb_val_V_3_0_0_fu_124 <= select_ln1539_2_fu_431_p3;
        pixbuf_cr_val_V_3_0_0_fu_92 <= select_ln1539_5_fu_452_p3;
        pixbuf_y_val_V_1_0_05_fu_96 <= pixbuf_y_val_V_2_0_06_fu_100;
        pixbuf_y_val_V_2_0_06_fu_100 <= pixbuf_y_val_V_3_0_07_fu_104;
        pixbuf_y_val_V_3_0_07_fu_104 <= pixbuf_y_val_V_4_0_08_fu_108;
        pixbuf_y_val_V_4_0_08_fu_108 <= mpix_y_val_V_0_4_fu_112;
        rhs_2_fu_116 <= rhs_fu_445_p3;
        rhs_3_fu_128 <= rhs_4_fu_424_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        loopWidth_reg_745 <= loopWidth_fu_197_p2;
        select_ln1443_reg_735[0] <= select_ln1443_fu_189_p3[0];
select_ln1443_reg_735[2] <= select_ln1443_fu_189_p3[2];
    end
end

always @ (posedge ap_clk) begin
    if (((p_read_1_read_fu_136_p2 == 1'd0) & (tmp_reg_800_pp0_iter1_reg == 1'd0) & (icmp_ln1448_reg_776_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pixbuf_y_val_V_1_0_05_load_reg_814 <= pixbuf_y_val_V_1_0_05_fu_96;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1448_reg_776_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln1414_1_reg_809 <= select_ln1414_1_fu_526_p3;
        select_ln1414_reg_804 <= select_ln1414_fu_519_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_reg_800_pp0_iter2_reg <= tmp_reg_800_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_2_reg_750 <= y_2_fu_203_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1448_fu_232_p2 == 1'd0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_213_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_213_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_reg_800_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (p_read_1_read_fu_136_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0)) | ((p_read_1_read_fu_136_p2 == 1'd1) & (tmp_reg_800_pp0_iter1_reg == 1'd0) & (icmp_ln1448_reg_776_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        outImg_blk_n = outImg_full_n;
    end else begin
        outImg_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_01001)) begin
        if (((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_predicate_op131_write_state6 == 1'b1))) begin
            outImg_din = or_ln174_6_fu_614_p4;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op115_write_state5 == 1'b1))) begin
            outImg_din = or_ln174_4_fu_545_p4;
        end else begin
            outImg_din = 'bx;
        end
    end else begin
        outImg_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op131_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op115_write_state5 == 1'b1)))) begin
        outImg_write = 1'b1;
    end else begin
        outImg_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1458_reg_786 == 1'd1) & (icmp_ln1448_reg_776 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcImg_blk_n = srcImg_empty_n;
    end else begin
        srcImg_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op60_read_state4 == 1'b1))) begin
        srcImg_read = 1'b1;
    end else begin
        srcImg_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_213_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1346_4_fu_497_p2 = (zext_ln215_2_fu_489_p1 + 9'd1);

assign add_ln1346_fu_467_p2 = (zext_ln215_fu_459_p1 + 9'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op131_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op115_write_state5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (srcImg_empty_n == 1'b0) & (ap_predicate_op60_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op131_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op115_write_state5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (srcImg_empty_n == 1'b0) & (ap_predicate_op60_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op131_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op115_write_state5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (srcImg_empty_n == 1'b0) & (ap_predicate_op60_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((srcImg_empty_n == 1'b0) & (ap_predicate_op60_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((outImg_full_n == 1'b0) & (ap_predicate_op115_write_state5 == 1'b1));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter3 = ((outImg_full_n == 1'b0) & (ap_predicate_op131_write_state6 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op115_write_state5 = ((p_read_1_read_fu_136_p2 == 1'd1) & (tmp_reg_800_pp0_iter1_reg == 1'd0) & (icmp_ln1448_reg_776_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op131_write_state6 = ((tmp_reg_800_pp0_iter2_reg == 1'd0) & (p_read_1_read_fu_136_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op60_read_state4 = ((icmp_ln1458_reg_786 == 1'd1) & (icmp_ln1448_reg_776 == 1'd1));
end

assign cmp118_fu_251_p2 = ((x_reg_178 == 15'd1) ? 1'b1 : 1'b0);

assign icmp_ln1445_fu_213_p2 = (($signed(zext_ln1445_fu_209_p1) < $signed(height)) ? 1'b1 : 1'b0);

assign icmp_ln1448_fu_232_p2 = (($signed(zext_ln1448_fu_224_p1) < $signed(loopWidth_reg_745)) ? 1'b1 : 1'b0);

assign icmp_ln1458_fu_246_p2 = ((zext_ln1448_fu_224_p1 < width) ? 1'b1 : 1'b0);

assign inpix_val_V_0_fu_271_p1 = srcImg_dout[7:0];

assign lhs_4_fu_417_p3 = ((cmp118_reg_790_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cr_val_V_0_0_fu_88 : select_ln1519_fu_375_p3);

assign lhs_fu_438_p3 = ((cmp118_reg_790_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cb_val_V_0_0_fu_84 : select_ln1519_3_fu_396_p3);

assign loopWidth_fu_197_p2 = (width + select_ln1443_fu_189_p3);

assign mpix_cb_val_V_0_fu_275_p4 = {{srcImg_dout[15:8]}};

assign odd_col_fu_242_p1 = out_x_fu_237_p2[0:0];

assign or_ln174_4_fu_545_p4 = {{{inpix_val_V_2_1_fu_76}, {inpix_val_V_1_fu_72}}, {mpix_y_val_V_0_fu_68}};

assign or_ln174_6_fu_614_p4 = {{{select_ln1414_1_reg_809}, {select_ln1414_reg_804}}, {pixbuf_y_val_V_1_0_05_load_reg_814}};

assign out_x_fu_237_p2 = (zext_ln1448_fu_224_p1 - select_ln1443_reg_735);

assign p_read_1_read_fu_136_p2 = p_read;

assign ret_1_fu_503_p2 = (add_ln1346_4_fu_497_p2 + zext_ln215_3_fu_493_p1);

assign ret_fu_473_p2 = (add_ln1346_fu_467_p2 + zext_ln215_1_fu_463_p1);

assign rhs_4_fu_424_p3 = ((cmp118_reg_790_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cr_val_V_0_0_fu_88 : select_ln1519_1_fu_382_p3);

assign rhs_fu_445_p3 = ((cmp118_reg_790_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cb_val_V_0_0_fu_84 : select_ln1519_4_fu_403_p3);

assign select_ln1414_1_fu_526_p3 = ((odd_col_reg_780_pp0_iter1_reg[0:0] == 1'b1) ? trunc_ln213_1_fu_509_p4 : rhs_4_fu_424_p3);

assign select_ln1414_fu_519_p3 = ((odd_col_reg_780_pp0_iter1_reg[0:0] == 1'b1) ? trunc_ln1_fu_479_p4 : rhs_fu_445_p3);

assign select_ln1443_fu_189_p0 = p_read;

assign select_ln1443_fu_189_p3 = ((select_ln1443_fu_189_p0[0:0] == 1'b1) ? 16'd0 : 16'd5);

assign select_ln1473_1_fu_302_p3 = ((trunc_ln1448_reg_764[0:0] == 1'b1) ? mpix_cb_val_V_0_0_fu_84 : mpix_cb_val_V_0_fu_275_p4);

assign select_ln1473_fu_295_p3 = ((trunc_ln1448_reg_764[0:0] == 1'b1) ? mpix_cb_val_V_0_fu_275_p4 : mpix_cr_val_V_0_0_fu_88);

assign select_ln1519_1_fu_382_p3 = ((trunc_ln1448_reg_764_pp0_iter1_reg[0:0] == 1'b1) ? lhs_3_fu_132 : rhs_3_fu_128);

assign select_ln1519_2_fu_389_p3 = ((trunc_ln1448_reg_764_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cb_val_V_0_0_fu_84 : pixbuf_cb_val_V_3_0_0_fu_124);

assign select_ln1519_3_fu_396_p3 = ((trunc_ln1448_reg_764_pp0_iter1_reg[0:0] == 1'b1) ? pixbuf_cb_val_V_3_0_0_fu_124 : lhs_2_fu_120);

assign select_ln1519_4_fu_403_p3 = ((trunc_ln1448_reg_764_pp0_iter1_reg[0:0] == 1'b1) ? lhs_2_fu_120 : rhs_2_fu_116);

assign select_ln1519_5_fu_410_p3 = ((trunc_ln1448_reg_764_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cr_val_V_0_0_fu_88 : pixbuf_cr_val_V_3_0_0_fu_92);

assign select_ln1519_fu_375_p3 = ((trunc_ln1448_reg_764_pp0_iter1_reg[0:0] == 1'b1) ? pixbuf_cr_val_V_3_0_0_fu_92 : lhs_3_fu_132);

assign select_ln1539_2_fu_431_p3 = ((cmp118_reg_790_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cb_val_V_0_0_fu_84 : select_ln1519_2_fu_389_p3);

assign select_ln1539_5_fu_452_p3 = ((cmp118_reg_790_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cr_val_V_0_0_fu_88 : select_ln1519_5_fu_410_p3);

assign trunc_ln1448_fu_228_p1 = x_reg_178[0:0];

assign trunc_ln1_fu_479_p4 = {{ret_fu_473_p2[8:1]}};

assign trunc_ln213_1_fu_509_p4 = {{ret_1_fu_503_p2[8:1]}};

assign x_2_fu_218_p2 = (x_reg_178 + 15'd1);

assign y_2_fu_203_p2 = (y_reg_167 + 15'd1);

assign zext_ln1445_fu_209_p1 = y_reg_167;

assign zext_ln1448_fu_224_p1 = x_reg_178;

assign zext_ln215_1_fu_463_p1 = rhs_fu_445_p3;

assign zext_ln215_2_fu_489_p1 = lhs_4_fu_417_p3;

assign zext_ln215_3_fu_493_p1 = rhs_4_fu_424_p3;

assign zext_ln215_fu_459_p1 = lhs_fu_438_p3;

always @ (posedge ap_clk) begin
    select_ln1443_reg_735[1] <= 1'b0;
    select_ln1443_reg_735[15:3] <= 13'b0000000000000;
end

endmodule //bd_0837_hsc_0_v_hcresampler_core26
