// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_0837_hsc_0_MultiPixStream2AXIvideo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        stream_out_420_dout,
        stream_out_420_empty_n,
        stream_out_420_read,
        Height,
        WidthOut,
        ColorModeOut,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_state4 = 6'd4;
parameter    ap_ST_fsm_state5 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state9 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] stream_out_420_dout;
input   stream_out_420_empty_n;
output   stream_out_420_read;
input  [15:0] Height;
input  [15:0] WidthOut;
input  [7:0] ColorModeOut;
output  [23:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stream_out_420_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] mapComp_address0;
reg    mapComp_ce0;
wire   [1:0] mapComp_q0;
reg    stream_out_420_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln1351_reg_531;
reg    m_axis_video_TDATA_blk_n;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] icmp_ln1351_reg_531_pp1_iter1_reg;
reg   [1:0] i_reg_190;
reg   [10:0] j_reg_227;
reg   [0:0] sof_2_reg_238;
wire   [9:0] trunc_ln1298_fu_253_p1;
wire   [10:0] trunc_ln1299_fu_257_p1;
wire   [3:0] sub_ln1344_fu_277_p2;
wire   [1:0] add_ln1342_fu_283_p2;
reg   [1:0] add_ln1342_reg_483;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1342_fu_289_p2;
reg   [0:0] icmp_ln1342_reg_488;
wire   [10:0] sub_fu_337_p2;
wire    ap_CS_fsm_state4;
wire   [1:0] trunc_ln215_fu_342_p1;
reg   [1:0] trunc_ln215_reg_502;
wire   [1:0] trunc_ln215_1_fu_346_p1;
reg   [1:0] trunc_ln215_1_reg_507;
wire   [1:0] trunc_ln215_2_fu_350_p1;
reg   [1:0] trunc_ln215_2_reg_512;
wire   [9:0] i_2_fu_354_p2;
reg   [9:0] i_2_reg_517;
wire    ap_CS_fsm_state5;
wire    regslice_both_AXI_video_strm_V_data_V_U_apdone_blk;
wire   [0:0] icmp_ln1348_fu_360_p2;
wire   [10:0] j_1_fu_365_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state6_pp1_stage0_iter0;
reg    ap_block_state7_pp1_stage0_iter1;
reg    ap_block_state7_io;
reg    ap_block_state8_pp1_stage0_iter2;
reg    ap_block_state8_io;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln1351_fu_371_p2;
wire   [0:0] axi_last_V_fu_376_p2;
reg   [0:0] axi_last_V_reg_535;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_condition_pp1_exit_iter1_state7;
reg   [1:0] ap_phi_mux_i_phi_fu_194_p4;
wire    ap_block_pp0_stage0;
reg   [9:0] i_1_reg_202;
wire    ap_CS_fsm_state9;
reg   [0:0] sof_reg_213;
reg   [0:0] ap_phi_mux_sof_2_phi_fu_243_p4;
wire   [63:0] zext_ln1344_2_fu_304_p1;
reg   [4:0] map_V_0_038_fu_112;
wire   [4:0] zext_ln1344_fu_309_p1;
reg   [4:0] map_V_1_039_fu_116;
reg   [4:0] map_V_2_040_fu_120;
reg    ap_block_pp1_stage0_01001;
wire   [1:0] trunc_ln1344_1_fu_265_p1;
wire   [3:0] tmp_2_cast_fu_269_p3;
wire   [3:0] trunc_ln1344_fu_261_p1;
wire   [3:0] zext_ln1344_1_fu_295_p1;
wire   [3:0] add_ln1344_fu_299_p2;
wire   [7:0] pix_val_V_0_fu_381_p1;
wire   [7:0] tmp_fu_405_p2;
wire   [7:0] tmp_fu_405_p3;
wire   [7:0] tmp_3_fu_416_p2;
wire   [7:0] tmp_3_fu_416_p3;
wire   [7:0] tmp_4_fu_427_p2;
wire   [7:0] tmp_4_fu_427_p3;
wire   [7:0] tmp_4_fu_427_p5;
wire   [7:0] tmp_3_fu_416_p5;
wire   [7:0] tmp_fu_405_p5;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [23:0] m_axis_video_TDATA_int_regslice;
reg    m_axis_video_TVALID_int_regslice;
wire    m_axis_video_TREADY_int_regslice;
wire    regslice_both_AXI_video_strm_V_data_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_keep_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_keep_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_strb_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_strb_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_user_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_user_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_user_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_last_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_last_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_last_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_id_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_id_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_id_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_dest_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_dest_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

bd_0837_hsc_0_MultiPixStream2AXIvideo_mapComp #(
    .DataWidth( 2 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
mapComp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mapComp_address0),
    .ce0(mapComp_ce0),
    .q0(mapComp_q0)
);

bd_0837_hsc_0_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_32_8_1_1_U114(
    .din0(pix_val_V_0_fu_381_p1),
    .din1(tmp_fu_405_p2),
    .din2(tmp_fu_405_p3),
    .din3(trunc_ln215_reg_502),
    .dout(tmp_fu_405_p5)
);

bd_0837_hsc_0_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_32_8_1_1_U115(
    .din0(pix_val_V_0_fu_381_p1),
    .din1(tmp_3_fu_416_p2),
    .din2(tmp_3_fu_416_p3),
    .din3(trunc_ln215_1_reg_507),
    .dout(tmp_3_fu_416_p5)
);

bd_0837_hsc_0_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_32_8_1_1_U116(
    .din0(pix_val_V_0_fu_381_p1),
    .din1(tmp_4_fu_427_p2),
    .din2(tmp_4_fu_427_p3),
    .din3(trunc_ln215_2_reg_512),
    .dout(tmp_4_fu_427_p5)
);

bd_0837_hsc_0_regslice_both #(
    .DataWidth( 24 ))
regslice_both_AXI_video_strm_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(m_axis_video_TDATA_int_regslice),
    .vld_in(m_axis_video_TVALID_int_regslice),
    .ack_in(m_axis_video_TREADY_int_regslice),
    .data_out(m_axis_video_TDATA),
    .vld_out(regslice_both_AXI_video_strm_V_data_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_data_V_U_apdone_blk)
);

bd_0837_hsc_0_regslice_both #(
    .DataWidth( 3 ))
regslice_both_AXI_video_strm_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(3'd7),
    .vld_in(m_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_AXI_video_strm_V_keep_V_U_ack_in_dummy),
    .data_out(m_axis_video_TKEEP),
    .vld_out(regslice_both_AXI_video_strm_V_keep_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk)
);

bd_0837_hsc_0_regslice_both #(
    .DataWidth( 3 ))
regslice_both_AXI_video_strm_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(3'd0),
    .vld_in(m_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_AXI_video_strm_V_strb_V_U_ack_in_dummy),
    .data_out(m_axis_video_TSTRB),
    .vld_out(regslice_both_AXI_video_strm_V_strb_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk)
);

bd_0837_hsc_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(ap_phi_mux_sof_2_phi_fu_243_p4),
    .vld_in(m_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_AXI_video_strm_V_user_V_U_ack_in_dummy),
    .data_out(m_axis_video_TUSER),
    .vld_out(regslice_both_AXI_video_strm_V_user_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_user_V_U_apdone_blk)
);

bd_0837_hsc_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(axi_last_V_reg_535),
    .vld_in(m_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_AXI_video_strm_V_last_V_U_ack_in_dummy),
    .data_out(m_axis_video_TLAST),
    .vld_out(regslice_both_AXI_video_strm_V_last_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_last_V_U_apdone_blk)
);

bd_0837_hsc_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd0),
    .vld_in(m_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_AXI_video_strm_V_id_V_U_ack_in_dummy),
    .data_out(m_axis_video_TID),
    .vld_out(regslice_both_AXI_video_strm_V_id_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_id_V_U_apdone_blk)
);

bd_0837_hsc_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd0),
    .vld_in(m_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_AXI_video_strm_V_dest_V_U_ack_in_dummy),
    .data_out(m_axis_video_TDEST),
    .vld_out(regslice_both_AXI_video_strm_V_dest_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1348_fu_360_p2 == 1'd1) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1348_fu_360_p2 == 1'd0) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter1_state7) & (ap_enable_reg_pp1_iter0 == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln1348_fu_360_p2 == 1'd0) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0)))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter1_state7))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1348_fu_360_p2 == 1'd0) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_1_reg_202 <= i_2_reg_517;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_202 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1342_reg_488 == 1'd0))) begin
        i_reg_190 <= add_ln1342_reg_483;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_190 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1348_fu_360_p2 == 1'd0) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
        j_reg_227 <= 11'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln1351_fu_371_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        j_reg_227 <= j_1_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1348_fu_360_p2 == 1'd0) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
        sof_2_reg_238 <= sof_reg_213;
    end else if (((icmp_ln1351_reg_531_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sof_2_reg_238 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sof_reg_213 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sof_reg_213 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln1342_reg_483 <= add_ln1342_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln1351_fu_371_p2 == 1'd0))) begin
        axi_last_V_reg_535 <= axi_last_V_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
        i_2_reg_517 <= i_2_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1342_reg_488 <= icmp_ln1342_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln1351_reg_531 <= icmp_ln1351_fu_371_p2;
        icmp_ln1351_reg_531_pp1_iter1_reg <= icmp_ln1351_reg_531;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_190 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        map_V_0_038_fu_112[1 : 0] <= zext_ln1344_fu_309_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_190 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        map_V_1_039_fu_116[1 : 0] <= zext_ln1344_fu_309_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_reg_190 == 2'd1) & ~(i_reg_190 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        map_V_2_040_fu_120[1 : 0] <= zext_ln1344_fu_309_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        trunc_ln215_1_reg_507 <= trunc_ln215_1_fu_346_p1;
        trunc_ln215_2_reg_512 <= trunc_ln215_2_fu_350_p1;
        trunc_ln215_reg_502 <= trunc_ln215_fu_342_p1;
    end
end

always @ (*) begin
    if ((icmp_ln1342_fu_289_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_condition_pp1_exit_iter1_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter1_state7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln1351_fu_371_p2 == 1'd1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1348_fu_360_p2 == 1'd1) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1342_reg_488 == 1'd0))) begin
        ap_phi_mux_i_phi_fu_194_p4 = add_ln1342_reg_483;
    end else begin
        ap_phi_mux_i_phi_fu_194_p4 = i_reg_190;
    end
end

always @ (*) begin
    if (((icmp_ln1351_reg_531_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_sof_2_phi_fu_243_p4 = 1'd0;
    end else begin
        ap_phi_mux_sof_2_phi_fu_243_p4 = sof_2_reg_238;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1348_fu_360_p2 == 1'd1) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln1351_reg_531_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0)) | ((icmp_ln1351_reg_531 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY_int_regslice;
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1351_reg_531 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        m_axis_video_TVALID_int_regslice = 1'b1;
    end else begin
        m_axis_video_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mapComp_ce0 = 1'b1;
    end else begin
        mapComp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1351_reg_531 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        stream_out_420_blk_n = stream_out_420_empty_n;
    end else begin
        stream_out_420_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1351_reg_531 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        stream_out_420_read = 1'b1;
    end else begin
        stream_out_420_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln1342_fu_289_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln1342_fu_289_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1348_fu_360_p2 == 1'd1) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1348_fu_360_p2 == 1'd0) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1342_fu_283_p2 = (ap_phi_mux_i_phi_fu_194_p4 + 2'd1);

assign add_ln1344_fu_299_p2 = (sub_ln1344_fu_277_p2 + zext_ln1344_1_fu_295_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((icmp_ln1351_reg_531_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (m_axis_video_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (((icmp_ln1351_reg_531 == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0)) | ((icmp_ln1351_reg_531 == 1'd0) & (stream_out_420_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((ap_enable_reg_pp1_iter2 == 1'b1) & ((1'b1 == ap_block_state8_io) | ((icmp_ln1351_reg_531_pp1_iter1_reg == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state7_io) | ((icmp_ln1351_reg_531 == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0)) | ((icmp_ln1351_reg_531 == 1'd0) & (stream_out_420_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((ap_enable_reg_pp1_iter2 == 1'b1) & ((1'b1 == ap_block_state8_io) | ((icmp_ln1351_reg_531_pp1_iter1_reg == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state7_io) | ((icmp_ln1351_reg_531 == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0)) | ((icmp_ln1351_reg_531 == 1'd0) & (stream_out_420_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((icmp_ln1351_reg_531 == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp1_stage0_iter1 = (((icmp_ln1351_reg_531 == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0)) | ((icmp_ln1351_reg_531 == 1'd0) & (stream_out_420_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state8_io = ((icmp_ln1351_reg_531_pp1_iter1_reg == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state8_pp1_stage0_iter2 = ((icmp_ln1351_reg_531_pp1_iter1_reg == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign axi_last_V_fu_376_p2 = ((j_reg_227 == sub_fu_337_p2) ? 1'b1 : 1'b0);

assign i_2_fu_354_p2 = (i_1_reg_202 + 10'd1);

assign icmp_ln1342_fu_289_p2 = ((ap_phi_mux_i_phi_fu_194_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln1348_fu_360_p2 = ((i_1_reg_202 == trunc_ln1298_fu_253_p1) ? 1'b1 : 1'b0);

assign icmp_ln1351_fu_371_p2 = ((j_reg_227 == trunc_ln1299_fu_257_p1) ? 1'b1 : 1'b0);

assign j_1_fu_365_p2 = (j_reg_227 + 11'd1);

assign m_axis_video_TDATA_int_regslice = {{{tmp_4_fu_427_p5}, {tmp_3_fu_416_p5}}, {tmp_fu_405_p5}};

assign m_axis_video_TVALID = regslice_both_AXI_video_strm_V_data_V_U_vld_out;

assign mapComp_address0 = zext_ln1344_2_fu_304_p1;

assign pix_val_V_0_fu_381_p1 = stream_out_420_dout[7:0];

assign sub_fu_337_p2 = ($signed(trunc_ln1299_fu_257_p1) + $signed(11'd2047));

assign sub_ln1344_fu_277_p2 = (tmp_2_cast_fu_269_p3 - trunc_ln1344_fu_261_p1);

assign tmp_2_cast_fu_269_p3 = {{trunc_ln1344_1_fu_265_p1}, {2'd0}};

assign tmp_3_fu_416_p2 = {{stream_out_420_dout[15:8]}};

assign tmp_3_fu_416_p3 = {{stream_out_420_dout[23:16]}};

assign tmp_4_fu_427_p2 = {{stream_out_420_dout[15:8]}};

assign tmp_4_fu_427_p3 = {{stream_out_420_dout[23:16]}};

assign tmp_fu_405_p2 = {{stream_out_420_dout[15:8]}};

assign tmp_fu_405_p3 = {{stream_out_420_dout[23:16]}};

assign trunc_ln1298_fu_253_p1 = Height[9:0];

assign trunc_ln1299_fu_257_p1 = WidthOut[10:0];

assign trunc_ln1344_1_fu_265_p1 = ColorModeOut[1:0];

assign trunc_ln1344_fu_261_p1 = ColorModeOut[3:0];

assign trunc_ln215_1_fu_346_p1 = map_V_1_039_fu_116[1:0];

assign trunc_ln215_2_fu_350_p1 = map_V_2_040_fu_120[1:0];

assign trunc_ln215_fu_342_p1 = map_V_0_038_fu_112[1:0];

assign zext_ln1344_1_fu_295_p1 = ap_phi_mux_i_phi_fu_194_p4;

assign zext_ln1344_2_fu_304_p1 = add_ln1344_fu_299_p2;

assign zext_ln1344_fu_309_p1 = mapComp_q0;

always @ (posedge ap_clk) begin
    map_V_0_038_fu_112[4:2] <= 3'b000;
    map_V_1_039_fu_116[4:2] <= 3'b000;
    map_V_2_040_fu_120[4:2] <= 3'b000;
end

endmodule //bd_0837_hsc_0_MultiPixStream2AXIvideo
