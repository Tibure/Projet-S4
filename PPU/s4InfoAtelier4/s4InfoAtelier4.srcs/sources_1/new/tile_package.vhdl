---------------------------------------------------------------------------------------------
--
--	Pascal-Emmanuel Lachance | raesangur
--
--  github.com/omnikin-jaune/
--
---------------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.ppu_package.all;

package tile_package is 

constant TILE_COUNT     : integer := 1024;
constant TILE_TEX_COUNT : integer := 256;


constant TILE_SIZE : integer := (TILE_COUNT - 1);

type vector_tile_pos is array (0 to TILE_SIZE)            of std_logic_vector(POS_SIZE downto 0);
type vector_tile_cc  is array (0 to TILE_SIZE)            of std_logic_vector(CC_SIZE  downto 0);
type tile_textures   is array (0 to (TILE_TEX_COUNT - 1)) of texture;
function x_coord     (i : integer) return std_logic_vector;
function y_coord     (i : integer) return std_logic_vector;


--Tuile Background centre
constant s_tile_textures : tile_textures := (
    0 => (  "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0010", "0010", "0010", "0010", "0010", "0010", "0010", "0010", 
			"0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0010", "0010", "0010", "0010", "0010", "0010", "0010", "0010", 
			"0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0010", "0010", "0010", "0010", "0010", "0010", "0010", "0010", 
			"0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0010", "0010", "0010", "0010", "0010", "0010", "0010", "0010", 
			"0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0010", "0010", "0010", "0010", "0010", "0010", "0010", "0010", 
			"0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0010", "0010", "0010", "0010", "0010", "0010", "0010", "0010", 
			"0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0010", "0010", "0010", "0010", "0010", "0010", "0010", "0010", 
			"0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0010", "0010", "0010", "0010", "0010", "0010", "0010", "0010", 
			"0010", "0010", "0010", "0010", "0010", "0010", "0010", "0010", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", 
			"0010", "0010", "0010", "0010", "0010", "0010", "0010", "0010", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", 
			"0010", "0010", "0010", "0010", "0010", "0010", "0010", "0010", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", 
			"0010", "0010", "0010", "0010", "0010", "0010", "0010", "0010", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", 
			"0010", "0010", "0010", "0010", "0010", "0010", "0010", "0010", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", 
			"0010", "0010", "0010", "0010", "0010", "0010", "0010", "0010", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", 
			"0010", "0010", "0010", "0010", "0010", "0010", "0010", "0010", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", 
			"0010", "0010", "0010", "0010", "0010", "0010", "0010", "0010", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001") ,
               
    -- background Tuile coin
    1 => (  "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", 
			"0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", 
			"0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", 
			"0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", 
			"0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", 
			"0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", 
			"0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", 
			"0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", 
			"0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", 
			"0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", 
			"0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", 
			"0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", 
			"1000", "1000", "1000", "1000", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", 
			"1000", "1000", "1000", "1000", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", 
			"1000", "1000", "1000", "1000", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", 
			"1000", "1000", "1000", "1000", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111"  ),
        --BackGround cote
    2 => (  "1000", "1000", "1000", "1000", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", 
			"1000", "1000", "1000", "1000", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", 
			"1000", "1000", "1000", "1000", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", 
			"1000", "1000", "1000", "1000", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", 
			"1000", "1000", "1000", "1000", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", 
			"1000", "1000", "1000", "1000", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", 
			"1000", "1000", "1000", "1000", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", 
			"1000", "1000", "1000", "1000", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", 
			"1000", "1000", "1000", "1000", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", 
			"1000", "1000", "1000", "1000", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", 
			"1000", "1000", "1000", "1000", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", 
			"1000", "1000", "1000", "1000", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", 
			"1000", "1000", "1000", "1000", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", 
			"1000", "1000", "1000", "1000", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", 
			"1000", "1000", "1000", "1000", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111", 
			"1000", "1000", "1000", "1000", "0111", "0111", "0111", "0111", "0110", "0110", "0110", "0110", "0111", "0111", "0111", "0111" ),
            
            --orange
    3 => (  "0001", "0001", "0001", "0001", "1000", "1000", "1000", "0001", "0010", "0010", "0010", "0010", "0010", "0010", "0010", "0010", 
			"0001", "0001", "0001", "0001", "1000", "0001", "0001", "1000", "0010", "0010", "0010", "0010", "0010", "0010", "0010", "0010", 
			"0001", "0001", "0001", "0001", "1000", "0001", "0001", "0001", "1000", "0010", "0010", "0010", "0010", "0010", "0010", "0010", 
			"0001", "0001", "0001", "0001", "0001", "1000", "0001", "0001", "1000", "0010", "0010", "1000", "1000", "1000", "1000", "0010", 
			"0001", "0001", "0001", "0001", "0001", "0001", "1000", "0001", "1000", "0010", "1000", "0001", "0001", "0001", "0001", "1000", 
			"0001", "0001", "0001", "0001", "1000", "1000", "1000", "0001", "1000", "1000", "0001", "0001", "0001", "0001", "1000", "0010", 
			"0001", "0001", "1000", "1000", "0100", "0100", "0100", "1000", "1000", "0001", "0001", "0001", "0001", "1000", "0010", "0010", 
			"0001", "1000", "0100", "0100", "0101", "0101", "0100", "0100", "1000", "1000", "1000", "1000", "1000", "0010", "0010", "0010", 
			"1000", "0100", "0100", "0101", "0100", "0100", "0100", "0100", "1000", "0100", "1000", "0001", "0001", "0001", "0001", "0001", 
			"1000", "0100", "0101", "0100", "0100", "0100", "0100", "0100", "0100", "0100", "0100", "1000", "0001", "0001", "0001", "0001", 
			"1000", "0100", "0101", "0100", "0100", "0100", "0100", "0100", "0100", "0100", "0100", "1000", "0001", "0001", "0001", "0001", 
			"1000", "0100", "0100", "0100", "0100", "0100", "0100", "0100", "0100", "0100", "0100", "1000", "0001", "0001", "0001", "0001", 
			"1000", "0100", "0100", "0100", "0100", "0100", "0100", "0100", "0100", "0100", "0100", "1000", "0001", "0001", "0001", "0001", 
			"0010", "1000", "0100", "0100", "0100", "0100", "0100", "0100", "0100", "0100", "1000", "0001", "0001", "0001", "0001", "0001", 
			"0010", "0010", "1000", "0100", "0100", "0100", "0100", "0100", "0100", "1000", "0001", "0001", "0001", "0001", "0001", "0001", 
			"0010", "0010", "0010", "1000", "1000", "1000", "1000", "1000", "1000", "0001", "0001", "0001", "0001", "0001", "0001", "0001" ),
						
            
            --pomme
    4 => (  "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0010", "0010", "0010", "0010", "0010", "0010", "0010", "0010", 
			"0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0010", "0010", "1000", "1000", "0010", "0010", "0010", "0010", 
			"0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "1000", "1000", "0001", "0001", "1000", "0010", "0010", "0010", 
			"0001", "0001", "0001", "0001", "0001", "0001", "0001", "1000", "1001", "0001", "0001", "0001", "0001", "1000", "0010", "0010", 
			"0001", "0001", "0001", "0001", "1000", "1000", "1000", "1001", "1000", "1000", "1000", "1000", "0001", "1000", "0010", "0010", 
			"0001", "0001", "0001", "1000", "0011", "0011", "0011", "1001", "0011", "0011", "0011", "1000", "1000", "0010", "0010", "0010", 
			"0001", "0001", "1000", "0011", "0011", "0011", "0011", "1001", "0011", "0011", "0011", "1000", "0010", "0010", "0010", "0010", 
			"0001", "0001", "1000", "0011", "0011", "0111", "0111", "0011", "0011", "0011", "0011", "1000", "0010", "0010", "0010", "0010", 
			"0010", "0010", "1000", "0011", "0111", "0101", "0101", "0011", "0011", "0011", "0011", "1000", "0001", "0001", "0001", "0001", 
			"0010", "0010", "1000", "0011", "0011", "0101", "0111", "0011", "0011", "0011", "0011", "1000", "0001", "0001", "0001", "0001", 
			"0010", "0010", "1000", "0011", "0011", "0011", "0011", "0011", "0011", "0011", "0011", "1000", "0001", "0001", "0001", "0001", 
			"0010", "0010", "0010", "1000", "0011", "0011", "0011", "0011", "0011", "0011", "0011", "1000", "0001", "0001", "0001", "0001", 
			"0010", "0010", "0010", "0010", "1000", "0011", "0011", "0011", "0011", "0011", "1000", "0001", "0001", "0001", "0001", "0001", 
			"0010", "0010", "0010", "0010", "0010", "1000", "1000", "1000", "1000", "1000", "0001", "0001", "0001", "0001", "0001", "0001", 
			"0010", "0010", "0010", "0010", "0010", "0010", "0010", "0010", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", 
			"0010", "0010", "0010", "0010", "0010", "0010", "0010", "0010", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001" ),    
			
			-- snake corps
	5 => (  "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101" ),   


			-- snake corps 90 deg
	6 => (  "0000", "0000", "0000", "0000", "0000", "0000", "0000", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"0000", "0000", "0000", "0000", "0000", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"0000", "0000", "0000", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"0000", "0000", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"0000", "0000", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"0000", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"0000", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101" ),  

			--snake queue
	7 => ( "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"0000", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "0000", 
			"0000", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "0000", 
			"0000", "0000", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "0000", "0000", 
			"0000", "0000", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "0000", "0000", 
			"0000", "0000", "0000", "0000", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "0000", "0000", "0000", "0000" ),   			
			--snake tete
	8 =>  ( "0000", "0000", "0000", "0000", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "0000", "0000", "0000", "0000", 
			"0000", "0000", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "0000", "0000", 
			"0000", "0000", "1101", "1101", "1101", "1101", "1111", "1111", "1111", "1111", "1101", "1101", "1101", "1101", "0000", "0000", 
			"0000", "1101", "1101", "1101", "1111", "1111", "1101", "1101", "1101", "1101", "1111", "1111", "1101", "1101", "1101", "0000", 
			"0000", "1101", "1101", "1101", "1111", "1101", "1101", "1101", "1101", "1101", "1101", "1111", "1101", "1101", "1101", "0000", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1000", "1101", "1101", "1000", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1111", "1111", "1111", "1111", "1101", "1101", "1101", "1101", "1111", "1111", "1111", "1111", "1101", "1101", 
			"1101", "1101", "1111", "1111", "1000", "1111", "1101", "1101", "1101", "1101", "1111", "1000", "1111", "1111", "1101", "1101", 
			"1101", "1101", "1111", "1111", "1000", "1111", "1101", "1101", "1101", "1101", "1111", "1000", "1111", "1111", "1101", "1101", 
			"1101", "1101", "1111", "1111", "1111", "1111", "1101", "1101", "1101", "1101", "1111", "1111", "1111", "1111", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", 
			"1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101", "1101" ),   			




			
    others => (others => (others => '0')));
       


end package tile_package;

package body tile_package is

    function x_coord (i : integer) return std_logic_vector is
    begin
            return std_logic_vector(TO_UNSIGNED (i,POS_SIZE +1 ));

    end function;
    
    function y_coord (i : integer) return std_logic_vector is
    begin
                return coords((i/32) *16)(POS_SIZE downto 0);

    end function;
    
    
    
end package body tile_package;

