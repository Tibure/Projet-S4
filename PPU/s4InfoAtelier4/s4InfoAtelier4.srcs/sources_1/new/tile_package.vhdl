---------------------------------------------------------------------------------------------
--
--	Pascal-Emmanuel Lachance | raesangur
--
--  github.com/omnikin-jaune/
--
---------------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;


package tile_package is 

constant TILE_COUNT     : integer := 1024;
constant TILE_TEX_COUNT : integer := 256;
constant POS_SIZE : integer := 8;
constant  CC_SIZE : integer := 5;
constant CC_IN_ROW    : integer := 16;
constant CC_IN_COL    : integer := 16;
constant TILE_SIZE : integer := (TILE_COUNT - 1);
type texture    is array (0 to (CC_IN_ROW * CC_IN_COL) - 1) of std_logic_vector(CC_SIZE downto 0);
type vector_tile_pos is array (0 to TILE_SIZE)            of std_logic_vector(POS_SIZE downto 0);
type vector_tile_cc  is array (0 to TILE_SIZE)            of std_logic_vector(CC_SIZE  downto 0);
type tile_textures   is array (0 to (TILE_TEX_COUNT - 1)) of texture;
function coords     (a : integer) return std_logic_vector;
function tile_coords(a : integer) return std_logic_vector;



constant s_tile_textures : tile_textures := (
    0 => ("000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", 
          "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", 
          "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", 
          "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", 
          "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", 
          "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", 
          "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", 
          "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", 
          "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", 
          "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", 
          "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", 
          "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", 
          "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", 
          "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", 
          "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", 
          "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000"),

    1 => ("011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", 
          "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", 
          "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", 
          "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", 
          "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", 
          "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", 
          "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", 
          "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", 
          "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", 
          "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", 
          "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", 
          "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", 
          "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", 
          "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", 
          "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", 
          "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111", "011111"),

    2 => ("010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", 
          "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", 
          "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", 
          "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", 
          "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", 
          "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", 
          "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", 
          "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", 
          "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", 
          "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", 
          "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", 
          "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", 
          "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", 
          "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", 
          "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", 
          "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101", "010101"),
    others => (others => (others => '0')));


end package tile_package;

package body tile_package is

    function coords (a : integer) return std_logic_vector is
    begin
            return std_logic_vector(TO_UNSIGNED (a,POS_SIZE +1 ));

    end function;
    
    function tile_coords (a : integer) return std_logic_vector is
    begin
                return coords(16 * a)(POS_SIZE downto 0);

    end function;
    
    
    
end package body tile_package;

