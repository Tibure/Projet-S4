// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_0837_hsc_0_v_hcresampler_core (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        srcImg_dout,
        srcImg_empty_n,
        srcImg_read,
        height,
        width,
        outImg_din,
        outImg_full_n,
        outImg_write,
        bPassThru_dout,
        bPassThru_empty_n,
        bPassThru_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] srcImg_dout;
input   srcImg_empty_n;
output   srcImg_read;
input  [15:0] height;
input  [15:0] width;
output  [23:0] outImg_din;
input   outImg_full_n;
output   outImg_write;
input   bPassThru_dout;
input   bPassThru_empty_n;
output   bPassThru_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg srcImg_read;
reg[23:0] outImg_din;
reg outImg_write;
reg bPassThru_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    srcImg_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1448_reg_791;
reg   [0:0] icmp_ln1458_reg_801;
reg    outImg_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln1448_reg_791_pp0_iter1_reg;
reg   [0:0] tmp_reg_815;
reg   [0:0] tmp_reg_815_pp0_iter1_reg;
reg   [0:0] bPassThru_read_reg_757;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_reg_815_pp0_iter2_reg;
reg    bPassThru_blk_n;
reg   [14:0] x_reg_198;
wire   [15:0] select_ln1443_fu_209_p3;
reg   [15:0] select_ln1443_reg_762;
wire   [15:0] loopWidth_fu_217_p2;
reg   [15:0] loopWidth_reg_772;
wire   [14:0] y_3_fu_223_p2;
reg   [14:0] y_3_reg_777;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1445_fu_233_p2;
wire   [14:0] x_3_fu_238_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_predicate_op61_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_predicate_op120_write_state5;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_predicate_op137_write_state6;
reg    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1448_fu_248_p2;
wire   [0:0] odd_col_fu_258_p1;
reg   [0:0] odd_col_reg_795;
reg   [0:0] odd_col_reg_795_pp0_iter1_reg;
wire   [0:0] icmp_ln1458_fu_262_p2;
wire   [0:0] cmp116_i_fu_267_p2;
reg   [0:0] cmp116_i_reg_805;
reg   [0:0] cmp116_i_reg_805_pp0_iter1_reg;
wire   [7:0] select_ln1561_fu_419_p3;
reg   [7:0] select_ln1561_reg_819;
wire   [7:0] select_ln1572_fu_545_p3;
reg   [7:0] select_ln1572_reg_824;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter2_state5;
reg   [14:0] y_reg_187;
reg    ap_block_state1;
wire    ap_CS_fsm_state7;
reg   [63:0] filt_res1_fu_84;
wire   [63:0] filt_res1_1_fu_534_p3;
reg   [7:0] mpix_y_val_V_0_fu_88;
wire   [7:0] inpix_val_V_0_fu_281_p1;
reg   [7:0] mpix_cb_val_V_0_fu_92;
reg   [7:0] mpix_cr_val_V_0_fu_96;
reg   [7:0] mpix_y_val_V_0_6_fu_100;
reg   [7:0] mpix_cb_val_V_0_1_fu_104;
reg   [7:0] mpix_cr_val_V_0_1_fu_108;
reg   [7:0] mpix_cr_val_V_0_2_fu_112;
reg   [7:0] pixbuf_y_val_V_1_0_05_i_fu_116;
reg   [7:0] pixbuf_y_val_V_2_0_06_i_fu_120;
reg   [7:0] pixbuf_y_val_V_3_0_07_i_fu_124;
reg   [7:0] pixbuf_y_val_V_4_0_08_i_fu_128;
reg   [7:0] mpix_y_val_V_0_7_fu_132;
reg   [7:0] rhs_5_fu_136;
wire   [7:0] rhs_fu_405_p3;
reg   [7:0] rhs_7_fu_140;
wire   [7:0] rhs_11_fu_398_p3;
reg   [7:0] mpix_cb_val_V_0_2_fu_144;
reg   [7:0] rhs_8_fu_148;
wire   [7:0] rhs_12_fu_384_p3;
reg   [7:0] rhs_9_fu_152;
wire   [7:0] rhs_14_fu_377_p3;
wire   [23:0] or_ln174_4_i_fu_561_p4;
reg    ap_block_pp0_stage0_01001;
wire   [23:0] or_ln174_6_i_fu_635_p4;
wire   [0:0] select_ln1443_fu_209_p0;
wire   [15:0] zext_ln1445_fu_229_p1;
wire   [15:0] zext_ln1448_fu_244_p1;
wire   [15:0] out_x_fu_253_p2;
wire   [7:0] lhs_fu_412_p3;
wire   [8:0] ret_fu_426_p3;
wire   [9:0] zext_ln1346_2_fu_438_p1;
wire   [9:0] zext_ln1346_fu_434_p1;
wire   [8:0] zext_ln1346_3_fu_442_p1;
wire   [8:0] add_ln1346_7_fu_452_p2;
wire   [9:0] zext_ln1346_6_fu_458_p1;
wire   [9:0] add_ln1346_fu_446_p2;
wire   [9:0] add_ln1346_3_fu_462_p2;
wire   [7:0] lhs_5_fu_391_p3;
wire   [8:0] ret_2_fu_478_p3;
wire   [9:0] zext_ln1346_5_fu_490_p1;
wire   [9:0] zext_ln1346_4_fu_486_p1;
wire   [8:0] zext_ln1346_7_fu_494_p1;
wire   [8:0] add_ln1346_9_fu_504_p2;
wire   [9:0] zext_ln1346_8_fu_510_p1;
wire   [9:0] add_ln1346_8_fu_498_p2;
wire   [9:0] add_ln1346_6_fu_514_p2;
wire   [7:0] filt_res1_2_fu_520_p4;
wire   [63:0] zext_ln534_fu_530_p1;
wire   [7:0] trunc_ln1448_fu_541_p1;
wire   [7:0] trunc_ln2_fu_468_p4;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_233_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_233_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter2_state5)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_233_p2 == 1'd1)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state5))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_233_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1448_fu_248_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        x_reg_198 <= x_3_fu_238_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_233_p2 == 1'd1))) begin
        x_reg_198 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        y_reg_187 <= y_3_reg_777;
    end else if ((~((ap_start == 1'b0) | (bPassThru_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_reg_187 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        bPassThru_read_reg_757 <= bPassThru_dout;
        loopWidth_reg_772 <= loopWidth_fu_217_p2;
        select_ln1443_reg_762[1] <= select_ln1443_fu_209_p3[1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1448_fu_248_p2 == 1'd1))) begin
        cmp116_i_reg_805 <= cmp116_i_fu_267_p2;
        icmp_ln1458_reg_801 <= icmp_ln1458_fu_262_p2;
        odd_col_reg_795 <= odd_col_fu_258_p1;
        tmp_reg_815 <= out_x_fu_253_p2[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmp116_i_reg_805_pp0_iter1_reg <= cmp116_i_reg_805;
        icmp_ln1448_reg_791 <= icmp_ln1448_fu_248_p2;
        icmp_ln1448_reg_791_pp0_iter1_reg <= icmp_ln1448_reg_791;
        odd_col_reg_795_pp0_iter1_reg <= odd_col_reg_795;
        tmp_reg_815_pp0_iter1_reg <= tmp_reg_815;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1448_reg_791_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        filt_res1_fu_84 <= filt_res1_1_fu_534_p3;
        mpix_cb_val_V_0_2_fu_144 <= mpix_cb_val_V_0_1_fu_104;
        mpix_cr_val_V_0_2_fu_112 <= mpix_cr_val_V_0_1_fu_108;
        mpix_y_val_V_0_7_fu_132 <= mpix_y_val_V_0_6_fu_100;
        pixbuf_y_val_V_1_0_05_i_fu_116 <= pixbuf_y_val_V_2_0_06_i_fu_120;
        pixbuf_y_val_V_2_0_06_i_fu_120 <= pixbuf_y_val_V_3_0_07_i_fu_124;
        pixbuf_y_val_V_3_0_07_i_fu_124 <= pixbuf_y_val_V_4_0_08_i_fu_128;
        pixbuf_y_val_V_4_0_08_i_fu_128 <= mpix_y_val_V_0_7_fu_132;
        rhs_5_fu_136 <= rhs_fu_405_p3;
        rhs_7_fu_140 <= rhs_11_fu_398_p3;
        rhs_8_fu_148 <= rhs_12_fu_384_p3;
        rhs_9_fu_152 <= rhs_14_fu_377_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1458_reg_801 == 1'd1) & (icmp_ln1448_reg_791 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mpix_cb_val_V_0_1_fu_104 <= {{srcImg_dout[15:8]}};
        mpix_cb_val_V_0_fu_92 <= {{srcImg_dout[15:8]}};
        mpix_cr_val_V_0_1_fu_108 <= {{srcImg_dout[23:16]}};
        mpix_cr_val_V_0_fu_96 <= {{srcImg_dout[23:16]}};
        mpix_y_val_V_0_6_fu_100 <= inpix_val_V_0_fu_281_p1;
        mpix_y_val_V_0_fu_88 <= inpix_val_V_0_fu_281_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1448_reg_791_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln1561_reg_819 <= select_ln1561_fu_419_p3;
        select_ln1572_reg_824 <= select_ln1572_fu_545_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_reg_815_pp0_iter2_reg <= tmp_reg_815_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_3_reg_777 <= y_3_fu_223_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1448_fu_248_p2 == 1'd0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_233_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_233_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bPassThru_blk_n = bPassThru_empty_n;
    end else begin
        bPassThru_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (bPassThru_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bPassThru_read = 1'b1;
    end else begin
        bPassThru_read = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_reg_815_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (bPassThru_read_reg_757 == 1'd0) & (1'b0 == ap_block_pp0_stage0)) | ((bPassThru_read_reg_757 == 1'd1) & (tmp_reg_815_pp0_iter1_reg == 1'd0) & (icmp_ln1448_reg_791_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        outImg_blk_n = outImg_full_n;
    end else begin
        outImg_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_01001)) begin
        if (((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_predicate_op137_write_state6 == 1'b1))) begin
            outImg_din = or_ln174_6_i_fu_635_p4;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op120_write_state5 == 1'b1))) begin
            outImg_din = or_ln174_4_i_fu_561_p4;
        end else begin
            outImg_din = 'bx;
        end
    end else begin
        outImg_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op137_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op120_write_state5 == 1'b1)))) begin
        outImg_write = 1'b1;
    end else begin
        outImg_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1458_reg_801 == 1'd1) & (icmp_ln1448_reg_791 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcImg_blk_n = srcImg_empty_n;
    end else begin
        srcImg_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op61_read_state4 == 1'b1))) begin
        srcImg_read = 1'b1;
    end else begin
        srcImg_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (bPassThru_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_233_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1346_3_fu_462_p2 = (zext_ln1346_6_fu_458_p1 + add_ln1346_fu_446_p2);

assign add_ln1346_6_fu_514_p2 = (zext_ln1346_8_fu_510_p1 + add_ln1346_8_fu_498_p2);

assign add_ln1346_7_fu_452_p2 = (zext_ln1346_3_fu_442_p1 + 9'd2);

assign add_ln1346_8_fu_498_p2 = (zext_ln1346_5_fu_490_p1 + zext_ln1346_4_fu_486_p1);

assign add_ln1346_9_fu_504_p2 = (zext_ln1346_7_fu_494_p1 + 9'd2);

assign add_ln1346_fu_446_p2 = (zext_ln1346_2_fu_438_p1 + zext_ln1346_fu_434_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op137_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op120_write_state5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (srcImg_empty_n == 1'b0) & (ap_predicate_op61_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op137_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op120_write_state5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (srcImg_empty_n == 1'b0) & (ap_predicate_op61_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op137_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op120_write_state5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (srcImg_empty_n == 1'b0) & (ap_predicate_op61_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (bPassThru_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((srcImg_empty_n == 1'b0) & (ap_predicate_op61_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((outImg_full_n == 1'b0) & (ap_predicate_op120_write_state5 == 1'b1));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter3 = ((outImg_full_n == 1'b0) & (ap_predicate_op137_write_state6 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op120_write_state5 = ((bPassThru_read_reg_757 == 1'd1) & (tmp_reg_815_pp0_iter1_reg == 1'd0) & (icmp_ln1448_reg_791_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op137_write_state6 = ((tmp_reg_815_pp0_iter2_reg == 1'd0) & (bPassThru_read_reg_757 == 1'd0));
end

always @ (*) begin
    ap_predicate_op61_read_state4 = ((icmp_ln1458_reg_801 == 1'd1) & (icmp_ln1448_reg_791 == 1'd1));
end

assign cmp116_i_fu_267_p2 = ((x_reg_198 == 15'd0) ? 1'b1 : 1'b0);

assign filt_res1_1_fu_534_p3 = ((odd_col_reg_795_pp0_iter1_reg[0:0] == 1'b1) ? filt_res1_fu_84 : zext_ln534_fu_530_p1);

assign filt_res1_2_fu_520_p4 = {{add_ln1346_6_fu_514_p2[9:2]}};

assign icmp_ln1445_fu_233_p2 = (($signed(zext_ln1445_fu_229_p1) < $signed(height)) ? 1'b1 : 1'b0);

assign icmp_ln1448_fu_248_p2 = (($signed(zext_ln1448_fu_244_p1) < $signed(loopWidth_reg_772)) ? 1'b1 : 1'b0);

assign icmp_ln1458_fu_262_p2 = ((zext_ln1448_fu_244_p1 < width) ? 1'b1 : 1'b0);

assign inpix_val_V_0_fu_281_p1 = srcImg_dout[7:0];

assign lhs_5_fu_391_p3 = ((cmp116_i_reg_805_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cr_val_V_0_1_fu_108 : rhs_8_fu_148);

assign lhs_fu_412_p3 = ((cmp116_i_reg_805_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cb_val_V_0_1_fu_104 : rhs_5_fu_136);

assign loopWidth_fu_217_p2 = (width + select_ln1443_fu_209_p3);

assign odd_col_fu_258_p1 = out_x_fu_253_p2[0:0];

assign or_ln174_4_i_fu_561_p4 = {{{mpix_cr_val_V_0_fu_96}, {mpix_cb_val_V_0_fu_92}}, {mpix_y_val_V_0_fu_88}};

assign or_ln174_6_i_fu_635_p4 = {{{{8'd0}, {select_ln1572_reg_824}}}, {select_ln1561_reg_819}};

assign out_x_fu_253_p2 = (zext_ln1448_fu_244_p1 - select_ln1443_reg_762);

assign ret_2_fu_478_p3 = {{rhs_12_fu_384_p3}, {1'd0}};

assign ret_fu_426_p3 = {{rhs_fu_405_p3}, {1'd0}};

assign rhs_11_fu_398_p3 = ((cmp116_i_reg_805_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cb_val_V_0_1_fu_104 : mpix_cb_val_V_0_2_fu_144);

assign rhs_12_fu_384_p3 = ((cmp116_i_reg_805_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cr_val_V_0_1_fu_108 : rhs_9_fu_152);

assign rhs_14_fu_377_p3 = ((cmp116_i_reg_805_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cr_val_V_0_1_fu_108 : mpix_cr_val_V_0_2_fu_112);

assign rhs_fu_405_p3 = ((cmp116_i_reg_805_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cb_val_V_0_1_fu_104 : rhs_7_fu_140);

assign select_ln1443_fu_209_p0 = bPassThru_dout;

assign select_ln1443_fu_209_p3 = ((select_ln1443_fu_209_p0[0:0] == 1'b1) ? 16'd0 : 16'd2);

assign select_ln1561_fu_419_p3 = ((bPassThru_read_reg_757[0:0] == 1'b1) ? pixbuf_y_val_V_1_0_05_i_fu_116 : pixbuf_y_val_V_4_0_08_i_fu_128);

assign select_ln1572_fu_545_p3 = ((odd_col_reg_795_pp0_iter1_reg[0:0] == 1'b1) ? trunc_ln1448_fu_541_p1 : trunc_ln2_fu_468_p4);

assign trunc_ln1448_fu_541_p1 = filt_res1_fu_84[7:0];

assign trunc_ln2_fu_468_p4 = {{add_ln1346_3_fu_462_p2[9:2]}};

assign x_3_fu_238_p2 = (x_reg_198 + 15'd1);

assign y_3_fu_223_p2 = (y_reg_187 + 15'd1);

assign zext_ln1346_2_fu_438_p1 = ret_fu_426_p3;

assign zext_ln1346_3_fu_442_p1 = rhs_11_fu_398_p3;

assign zext_ln1346_4_fu_486_p1 = lhs_5_fu_391_p3;

assign zext_ln1346_5_fu_490_p1 = ret_2_fu_478_p3;

assign zext_ln1346_6_fu_458_p1 = add_ln1346_7_fu_452_p2;

assign zext_ln1346_7_fu_494_p1 = rhs_14_fu_377_p3;

assign zext_ln1346_8_fu_510_p1 = add_ln1346_9_fu_504_p2;

assign zext_ln1346_fu_434_p1 = lhs_fu_412_p3;

assign zext_ln1445_fu_229_p1 = y_reg_187;

assign zext_ln1448_fu_244_p1 = x_reg_198;

assign zext_ln534_fu_530_p1 = filt_res1_2_fu_520_p4;

always @ (posedge ap_clk) begin
    select_ln1443_reg_762[0] <= 1'b0;
    select_ln1443_reg_762[15:2] <= 14'b00000000000000;
end

endmodule //bd_0837_hsc_0_v_hcresampler_core
